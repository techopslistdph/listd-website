{
    "openapi": "3.0.0",
    "info": {
    "title": "Listd API",
    "version": "1.0.0",
    "description": "Listd Real Estate Platform API Documentation",
    "contact": {
    "name": "Listd Support",
    "email": "support@listd.com"
    }
    },
    "servers": [
    {
    "url": "https://listd-restapi-dev.up.railway.app/api",
    "description": "Staging server"
    }
    ],
    "components": {
    "securitySchemes": {
    "bearerAuth": {
    "type": "http",
    "scheme": "bearer",
    "bearerFormat": "JWT",
    "description": "JWT token from Clerk authentication"
    }
    },
    "schemas": {
    "ErrorResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": false
    },
    "error": {
    "type": "object",
    "properties": {
    "code": {
    "type": "string",
    "enum": [
    "VALIDATION_ERROR",
    "UNAUTHORIZED",
    "FORBIDDEN",
    "NOT_FOUND",
    "DUPLICATE_RECORD",
    "INTERNAL_ERROR"
    ],
    "example": "NOT_FOUND"
    },
    "message": {
    "type": "string",
    "description": "Human-readable error message",
    "example": "Resource not found"
    },
    "details": {
    "type": "object",
    "description": "Additional error details"
    }
    }
    }
    }
    },
    "PaginationMeta": {
    "type": "object",
    "properties": {
    "total": {
    "type": "number",
    "description": "Total number of items",
    "example": 100
    },
    "page": {
    "type": "number",
    "description": "Current page number",
    "example": 1
    },
    "pageSize": {
    "type": "number",
    "description": "Number of items per page",
    "example": 10
    },
    "totalPages": {
    "type": "number",
    "description": "Total number of pages",
    "example": 10
    },
    "nextPage": {
    "type": "number",
    "nullable": true,
    "description": "Next page number if available",
    "example": 2
    },
    "prevPage": {
    "type": "number",
    "nullable": true,
    "description": "Previous page number if available",
    "example": null
    }
    }
    },
    "ApiKey": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "description": "Unique identifier for the API key"
    },
    "key": {
    "type": "string",
    "description": "The actual API key (only shown on creation)"
    },
    "userId": {
    "type": "string",
    "format": "uuid",
    "description": "ID of the user who owns this API key"
    },
    "name": {
    "type": "string",
    "description": "Name to identify the API key"
    },
    "permissions": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Array of permission strings"
    },
    "lastUsedAt": {
    "type": "string",
    "format": "date-time",
    "nullable": true,
    "description": "Last time the API key was used"
    },
    "expiresAt": {
    "type": "string",
    "format": "date-time",
    "nullable": true,
    "description": "When the API key expires"
    },
    "isActive": {
    "type": "boolean",
    "description": "Whether the API key is active"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "When the API key was created"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "When the API key was last updated"
    }
    }
    },
    "CreateApiKeyRequest": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "maxLength": 100,
    "description": "Name to identify the API key"
    },
    "permissions": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Array of permission strings"
    },
    "expiresAt": {
    "type": "string",
    "format": "date-time",
    "description": "ISO 8601 datetime when the key expires"
    }
    }
    },
    "UpdateApiKeyRequest": {
    "type": "object",
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "maxLength": 100,
    "description": "Name to identify the API key"
    },
    "permissions": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Array of permission strings"
    },
    "isActive": {
    "type": "boolean",
    "description": "Whether the API key is active"
    }
    }
    },
    "ApiKeyListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/ApiKey"
    }
    },
    "meta": {
    "type": "object",
    "properties": {
    "total": {
    "type": "integer",
    "description": "Total number of API keys"
    },
    "page": {
    "type": "integer",
    "description": "Current page number"
    },
    "pageSize": {
    "type": "integer",
    "description": "Number of items per page"
    },
    "totalPages": {
    "type": "integer",
    "description": "Total number of pages"
    }
    }
    }
    }
    },
    "S3UploadResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "url": {
    "type": "string",
    "format": "url",
    "example": "https://cdn.listd.xyz/listd/images/property-photo.webp",
    "description": "The public CDN URL of the uploaded file"
    }
    }
    },
    "EnqueueJobResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "jobId": {
    "type": "string",
    "example": "1234567890",
    "description": "Unique job ID for tracking job status"
    }
    }
    },
    "JobStatus": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "description": "Whether the API call was successful (not the job status)"
    },
    "data": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "description": "Job ID"
    },
    "name": {
    "type": "string",
    "description": "Job name/type"
    },
    "state": {
    "type": "string",
    "enum": [
    "waiting",
    "active",
    "completed",
    "failed",
    "delayed",
    "paused"
    ],
    "description": "Current state of the job"
    },
    "result": {
    "type": "object",
    "nullable": true,
    "description": "Job result data (only available when state is 'completed')"
    },
    "failedReason": {
    "oneOf": [
    {
    "type": "string"
    },
    {
    "type": "object"
    }
    ],
    "nullable": true,
    "description": "Reason for job failure (only available when state is 'failed')"
    },
    "attemptsMade": {
    "type": "integer",
    "description": "Number of attempts made to process the job"
    },
    "processedOn": {
    "type": "integer",
    "nullable": true,
    "description": "Timestamp when job processing started (milliseconds)"
    },
    "finishedOn": {
    "type": "integer",
    "nullable": true,
    "description": "Timestamp when job processing finished (milliseconds)"
    },
    "durationSeconds": {
    "type": "integer",
    "nullable": true,
    "description": "Job processing duration in seconds"
    }
    }
    }
    }
    },
    "Condominium": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Condominium ID"
    },
    "propertyId": {
    "type": "string",
    "format": "uuid",
    "description": "Related property ID"
    },
    "buildingName": {
    "type": "string",
    "description": "Name of the condominium building"
    },
    "floorNumber": {
    "type": "integer",
    "nullable": true,
    "description": "Floor number where the unit is located"
    },
    "floorArea": {
    "type": "number",
    "nullable": true,
    "description": "Floor area in square meters"
    },
    "furnishingStatus": {
    "type": "string",
    "nullable": true,
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ],
    "description": "Furnishing status of the unit"
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "nullable": true,
    "description": "Number of parking spaces"
    },
    "numberOfBathrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bathrooms"
    },
    "numberOfBedrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bedrooms"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "CondominiumWithProperty": {
    "type": "object",
    "allOf": [
    {
    "$ref": "#/components/schemas/Condominium"
    },
    {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property",
    "example": false
    }
    }
    }
    ]
    },
    "CreateCondominiumPropertyData": {
    "type": "object",
    "required": [
    "userId",
    "propertyTypeId",
    "listingTypeId",
    "listingTitle"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "address": {
    "type": "string"
    },
    "region": {
    "type": "string"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    },
    "isPublished": {
    "type": "boolean",
    "default": false
    }
    }
    },
    "CreateCondominiumData": {
    "type": "object",
    "required": [
    "buildingName"
    ],
    "properties": {
    "buildingName": {
    "type": "string",
    "minLength": 1
    },
    "floorNumber": {
    "type": "integer",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBathrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBedrooms": {
    "type": "integer",
    "minimum": 0
    }
    }
    },
    "CreateCondominiumInput": {
    "type": "object",
    "required": [
    "propertyData",
    "condominiumData"
    ],
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateCondominiumPropertyData"
    },
    "condominiumData": {
    "$ref": "#/components/schemas/CreateCondominiumData"
    }
    }
    },
    "UpdateCondominiumInput": {
    "type": "object",
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateCondominiumPropertyData"
    },
    "condominiumData": {
    "$ref": "#/components/schemas/CreateCondominiumData"
    }
    }
    },
    "CreateCondominiumCompleteInput": {
    "type": "object",
    "required": [
    "userId",
    "listingTypeId",
    "propertyTypeId",
    "buildingName",
    "listingTitle",
    "listingPrice"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "buildingName": {
    "type": "string",
    "minLength": 1
    },
    "floorNumber": {
    "type": "integer",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "numberOfBedrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBathrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "amenityIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "featureIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "photos": {
    "type": "array",
    "minItems": 3,
    "maxItems": 20,
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "pricePerSqm": {
    "type": "number",
    "minimum": 0
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    }
    }
    },
    "SaveCondominiumDraftInput": {
    "type": "object",
    "required": [
    "userId"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "isDraft": {
    "type": "boolean",
    "enum": [
    true
    ],
    "default": true
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "buildingName": {
    "type": "string",
    "minLength": 1
    },
    "floorNumber": {
    "type": "integer",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "numberOfBedrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBathrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "amenityIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "featureIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "photos": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "pricePerSqm": {
    "type": "number",
    "minimum": 0
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    }
    }
    },
    "PublishCondominiumInput": {
    "allOf": [
    {
    "$ref": "#/components/schemas/CreateCondominiumCompleteInput"
    },
    {
    "type": "object",
    "required": [
    "isDraft",
    "isPublished"
    ],
    "properties": {
    "isDraft": {
    "type": "boolean",
    "enum": [
    false
    ]
    },
    "isPublished": {
    "type": "boolean",
    "enum": [
    true
    ]
    }
    }
    }
    ]
    },
    "PropertySummary": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Property ID"
    },
    "listingTitle": {
    "type": "string",
    "description": "Listing title"
    },
    "listingPrice": {
    "type": "number",
    "nullable": true,
    "description": "Listing price"
    },
    "listingPriceFormatted": {
    "type": "string",
    "nullable": true,
    "description": "Formatted listing price"
    },
    "address": {
    "type": "string",
    "nullable": true,
    "description": "Complete address"
    },
    "cityName": {
    "type": "string",
    "nullable": true,
    "description": "City name"
    },
    "barangayName": {
    "type": "string",
    "nullable": true,
    "description": "Barangay name"
    },
    "longitude": {
    "type": "number",
    "nullable": true,
    "description": "Longitude coordinate"
    },
    "latitude": {
    "type": "number",
    "nullable": true,
    "description": "Latitude coordinate"
    },
    "propertyTypeName": {
    "type": "string",
    "description": "Property type name"
    },
    "listingTypeName": {
    "type": "string",
    "description": "Listing type name"
    },
    "scrapeContactInfo": {
    "type": "object",
    "nullable": true,
    "description": "Contact info from scraped data",
    "properties": {
    "agentName": {
    "type": "string",
    "example": "Leyde Francisco"
    },
    "agencyName": {
    "type": "string",
    "example": "Cebu Globenet Realty"
    },
    "phoneNumber": {
    "type": "string",
    "example": 639209214237
    },
    "extractedAt": {
    "type": "string",
    "format": "date-time",
    "example": "2025-06-01T05:00:00.344Z"
    }
    }
    },
    "images": {
    "type": "array",
    "description": "Property images",
    "items": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
    },
    "imageUrl": {
    "type": "string",
    "format": "url",
    "example": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    }
    }
    }
    }
    }
    },
    "CondominiumListingSummary": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Condominium ID"
    },
    "buildingName": {
    "type": "string",
    "description": "Building name"
    },
    "floorArea": {
    "type": "number",
    "nullable": true,
    "description": "Floor area in square meters"
    },
    "numberOfBedrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bedrooms"
    },
    "numberOfBathrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bathrooms"
    },
    "property": {
    "$ref": "#/components/schemas/PropertySummary"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property"
    }
    }
    },
    "CondominiumListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CondominiumListingSummary"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "CreateCondominiumResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "condominium": {
    "$ref": "#/components/schemas/Condominium"
    }
    }
    }
    }
    },
    "HouseAndLot": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "House and lot ID"
    },
    "propertyId": {
    "type": "string",
    "format": "uuid",
    "description": "Related property ID"
    },
    "lotSize": {
    "type": "number",
    "nullable": true,
    "description": "Lot size in square meters"
    },
    "floorArea": {
    "type": "number",
    "nullable": true,
    "description": "Floor area in square meters"
    },
    "numberOfBedrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bedrooms"
    },
    "numberOfBathrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bathrooms"
    },
    "numberOfFloors": {
    "type": "integer",
    "nullable": true,
    "description": "Number of floors"
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "nullable": true,
    "description": "Number of parking spaces"
    },
    "furnishingStatus": {
    "type": "string",
    "nullable": true,
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ],
    "description": "Furnishing status"
    },
    "numberOfGarages": {
    "type": "integer",
    "nullable": true,
    "description": "Number of garages"
    },
    "numberOfLivingRooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of living rooms"
    },
    "numberOfDiningRooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of dining rooms"
    },
    "numberOfKitchens": {
    "type": "integer",
    "nullable": true,
    "description": "Number of kitchens"
    },
    "numberOfMaidRooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of maid rooms"
    },
    "yearBuilt": {
    "type": "integer",
    "nullable": true,
    "description": "Year the house was built"
    },
    "hasSwimmingPool": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the property has a swimming pool"
    },
    "hasGarden": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the property has a garden"
    },
    "hasTerrace": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the property has a terrace"
    },
    "hasBalcony": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the property has a balcony"
    },
    "hasSecurity": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the property has security"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "HouseAndLotWithProperty": {
    "type": "object",
    "allOf": [
    {
    "$ref": "#/components/schemas/HouseAndLot"
    },
    {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property",
    "example": false
    }
    }
    }
    ]
    },
    "CreateHouseAndLotPropertyData": {
    "type": "object",
    "required": [
    "userId",
    "propertyTypeId",
    "listingTypeId",
    "listingTitle"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "address": {
    "type": "string"
    },
    "region": {
    "type": "string"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    },
    "isPublished": {
    "type": "boolean",
    "default": false
    }
    }
    },
    "CreateHouseAndLotData": {
    "type": "object",
    "properties": {
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "numberOfBedrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBathrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfFloors": {
    "type": "integer",
    "minimum": 1
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "numberOfGarages": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfLivingRooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfDiningRooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfKitchens": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfMaidRooms": {
    "type": "integer",
    "minimum": 0
    },
    "yearBuilt": {
    "type": "integer"
    },
    "hasSwimmingPool": {
    "type": "boolean"
    },
    "hasGarden": {
    "type": "boolean"
    },
    "hasTerrace": {
    "type": "boolean"
    },
    "hasBalcony": {
    "type": "boolean"
    },
    "hasSecurity": {
    "type": "boolean"
    }
    }
    },
    "CreateHouseAndLotInput": {
    "type": "object",
    "required": [
    "propertyData",
    "houseAndLotData"
    ],
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateHouseAndLotPropertyData"
    },
    "houseAndLotData": {
    "$ref": "#/components/schemas/CreateHouseAndLotData"
    }
    }
    },
    "UpdateHouseAndLotInput": {
    "type": "object",
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateHouseAndLotPropertyData"
    },
    "houseAndLotData": {
    "$ref": "#/components/schemas/CreateHouseAndLotData"
    }
    }
    },
    "CreateHouseAndLotCompleteInput": {
    "type": "object",
    "required": [
    "userId",
    "listingTypeId",
    "propertyTypeId",
    "listingTitle"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "numberOfFloors": {
    "type": "integer",
    "minimum": 1
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "numberOfBedrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBathrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "amenityIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "featureIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "photos": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "numberOfGarages": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfLivingRooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfDiningRooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfKitchens": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfMaidRooms": {
    "type": "integer",
    "minimum": 0
    },
    "yearBuilt": {
    "type": "integer"
    },
    "hasSwimmingPool": {
    "type": "boolean"
    },
    "hasGarden": {
    "type": "boolean"
    },
    "hasTerrace": {
    "type": "boolean"
    },
    "hasBalcony": {
    "type": "boolean"
    },
    "hasSecurity": {
    "type": "boolean"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    }
    }
    },
    "SaveHouseAndLotDraftInput": {
    "type": "object",
    "required": [
    "userId"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "isDraft": {
    "type": "boolean",
    "enum": [
    true
    ],
    "default": true
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "numberOfFloors": {
    "type": "integer",
    "minimum": 1
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "numberOfBedrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfBathrooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "amenityIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "featureIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "photos": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "numberOfGarages": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfLivingRooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfDiningRooms": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfKitchens": {
    "type": "integer",
    "minimum": 0
    },
    "numberOfMaidRooms": {
    "type": "integer",
    "minimum": 0
    },
    "yearBuilt": {
    "type": "integer"
    },
    "hasSwimmingPool": {
    "type": "boolean"
    },
    "hasGarden": {
    "type": "boolean"
    },
    "hasTerrace": {
    "type": "boolean"
    },
    "hasBalcony": {
    "type": "boolean"
    },
    "hasSecurity": {
    "type": "boolean"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    }
    }
    },
    "PublishHouseAndLotInput": {
    "allOf": [
    {
    "$ref": "#/components/schemas/CreateHouseAndLotCompleteInput"
    },
    {
    "type": "object",
    "required": [
    "isDraft",
    "isPublished"
    ],
    "properties": {
    "isDraft": {
    "type": "boolean",
    "enum": [
    false
    ]
    },
    "isPublished": {
    "type": "boolean",
    "enum": [
    true
    ]
    }
    }
    }
    ]
    },
    "HouseAndLotListingSummary": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "House and lot ID"
    },
    "floorArea": {
    "type": "number",
    "nullable": true,
    "description": "Floor area in square meters"
    },
    "lotSize": {
    "type": "number",
    "nullable": true,
    "description": "Lot size in square meters"
    },
    "numberOfBedrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bedrooms"
    },
    "numberOfBathrooms": {
    "type": "integer",
    "nullable": true,
    "description": "Number of bathrooms"
    },
    "property": {
    "$ref": "#/components/schemas/PropertySummary"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property"
    }
    }
    },
    "HouseAndLotListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/HouseAndLotListingSummary"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "CreateHouseAndLotResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "houseAndLot": {
    "$ref": "#/components/schemas/HouseAndLot"
    }
    }
    }
    }
    },
    "JobScheduler": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "description": "Unique identifier for the scheduler",
    "example": "hourly-warehouse-processing"
    },
    "pattern": {
    "type": "string",
    "nullable": true,
    "description": "Cron pattern for scheduled execution",
    "example": "0 * * * *"
    },
    "every": {
    "type": "number",
    "nullable": true,
    "description": "Interval in milliseconds for repeated execution",
    "example": 1800000
    },
    "tz": {
    "type": "string",
    "nullable": true,
    "description": "Timezone for cron pattern",
    "example": "Asia/Manila"
    },
    "next": {
    "type": "number",
    "nullable": true,
    "description": "Timestamp for next scheduled execution",
    "example": 1673888400000
    },
    "endDate": {
    "type": "string",
    "nullable": true,
    "description": "End date for the scheduler"
    },
    "startDate": {
    "type": "string",
    "nullable": true,
    "description": "Start date for the scheduler"
    }
    }
    },
    "JobSchedulersListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/JobScheduler"
    }
    }
    }
    },
    "JobSchedulerResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/JobScheduler"
    }
    }
    },
    "ManualJobTriggerResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "jobId": {
    "type": "string",
    "description": "ID of the manually triggered job",
    "example": "manual-12345"
    },
    "message": {
    "type": "string",
    "description": "Status message",
    "example": "Job triggered successfully"
    }
    }
    }
    }
    },
    "Amenity": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Unique identifier"
    },
    "name": {
    "type": "string",
    "description": "Amenity name"
    },
    "description": {
    "type": "string",
    "nullable": true,
    "description": "Optional description"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "CreateAmenityInput": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "maxLength": 100,
    "description": "Amenity name"
    },
    "description": {
    "type": "string",
    "maxLength": 500,
    "description": "Optional description"
    }
    }
    },
    "UpdateAmenityInput": {
    "type": "object",
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "maxLength": 100,
    "description": "Amenity name"
    },
    "description": {
    "type": "string",
    "maxLength": 500,
    "description": "Optional description"
    }
    }
    },
    "AmenityResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Amenity"
    }
    }
    },
    "AmenitiesListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Amenity"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "Feature": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Unique identifier"
    },
    "name": {
    "type": "string",
    "description": "Feature name"
    },
    "description": {
    "type": "string",
    "nullable": true,
    "description": "Optional description"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "CreateFeatureInput": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "maxLength": 100,
    "description": "Feature name"
    },
    "description": {
    "type": "string",
    "maxLength": 500,
    "description": "Optional description"
    }
    }
    },
    "UpdateFeatureInput": {
    "type": "object",
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "maxLength": 100,
    "description": "Feature name"
    },
    "description": {
    "type": "string",
    "maxLength": 500,
    "description": "Optional description"
    }
    }
    },
    "FeatureResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Feature"
    }
    }
    },
    "FeaturesListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Feature"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "City": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "example": "123e4567-e89b-12d3-a456-426614174000"
    },
    "name": {
    "type": "string",
    "example": "Makati City"
    },
    "psgcCode": {
    "type": "string",
    "example": "137602000"
    },
    "correspondenceCode": {
    "type": "string",
    "nullable": true,
    "example": "1376"
    },
    "incomeClassification": {
    "type": "string",
    "nullable": true,
    "example": "1st Class"
    },
    "population": {
    "type": "number",
    "nullable": true,
    "example": 629616
    },
    "censusYear": {
    "type": "number",
    "nullable": true,
    "example": 2020
    },
    "createdAt": {
    "type": "string",
    "format": "date-time"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time"
    }
    }
    },
    "CityInput": {
    "type": "object",
    "required": [
    "name",
    "psgcCode"
    ],
    "properties": {
    "name": {
    "type": "string",
    "example": "Makati City"
    },
    "psgcCode": {
    "type": "string",
    "example": "137602000"
    },
    "correspondenceCode": {
    "type": "string",
    "example": "1376"
    },
    "incomeClassification": {
    "type": "string",
    "example": "1st Class"
    },
    "population": {
    "type": "number",
    "example": 629616
    },
    "censusYear": {
    "type": "number",
    "example": 2020
    }
    }
    },
    "Barangay": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid"
    },
    "name": {
    "type": "string",
    "example": "Poblacion"
    },
    "psgcCode": {
    "type": "string",
    "example": "137602001"
    },
    "cityPsgcCode": {
    "type": "string",
    "example": "137602000"
    },
    "correspondenceCode": {
    "type": "string",
    "nullable": true
    },
    "urbanRural": {
    "type": "string",
    "nullable": true,
    "example": "Urban"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time"
    }
    }
    },
    "BarangayInput": {
    "type": "object",
    "required": [
    "name",
    "psgcCode",
    "cityPsgcCode"
    ],
    "properties": {
    "name": {
    "type": "string"
    },
    "psgcCode": {
    "type": "string"
    },
    "cityPsgcCode": {
    "type": "string"
    },
    "correspondenceCode": {
    "type": "string"
    },
    "urbanRural": {
    "type": "string"
    }
    }
    },
    "CreateListingTypeInput": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "description": "Listing type name"
    }
    }
    },
    "UpdateListingTypeInput": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "description": "Listing type name"
    }
    }
    },
    "ListingType": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Unique identifier"
    },
    "name": {
    "type": "string",
    "description": "Listing type name"
    },
    "disabled": {
    "type": "boolean",
    "description": "Whether the listing type is disabled"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "ListingTypeResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/ListingType"
    }
    }
    },
    "ListingTypesListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/ListingType"
    }
    }
    }
    },
    "CreateListingTypeResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "string",
    "format": "uuid",
    "description": "ID of the created listing type"
    }
    }
    },
    "WebResearchAiInput": {
    "type": "object",
    "required": [
    "query",
    "userLocation"
    ],
    "properties": {
    "query": {
    "type": "object",
    "required": [
    "propertyType",
    "propertySize",
    "propertyAddress"
    ],
    "properties": {
    "propertyType": {
    "type": "string",
    "enum": [
    "Condominium",
    "House and Lot",
    "Warehouse",
    "Vacant Lot"
    ],
    "description": "Type of property being valued"
    },
    "propertySize": {
    "type": "number",
    "minimum": 20,
    "description": "Property size in square meters"
    },
    "buildingName": {
    "type": "string",
    "default": "",
    "description": "Name of the building (for condominiums)"
    },
    "propertyAddress": {
    "type": "string",
    "minLength": 1,
    "description": "Full address of the property"
    },
    "propertyFeatures": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "default": [],
    "description": "List of property features"
    },
    "propertyAmenities": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "default": [],
    "description": "List of property amenities"
    },
    "propertyDescription": {
    "type": "string",
    "default": "",
    "description": "Additional property description"
    },
    "extraMetadata": {
    "type": "object",
    "additionalProperties": true,
    "default": {},
    "description": "Additional metadata for the property"
    }
    }
    },
    "searchContextSize": {
    "type": "string",
    "enum": [
    "low",
    "medium",
    "high"
    ],
    "default": "medium",
    "description": "Amount of context to search for comparables"
    },
    "userLocation": {
    "type": "object",
    "required": [
    "city",
    "region"
    ],
    "properties": {
    "city": {
    "type": "string",
    "minLength": 1,
    "description": "City where the property is located"
    },
    "region": {
    "type": "string",
    "minLength": 1,
    "description": "Region where the property is located"
    }
    }
    }
    }
    },
    "ValuationRange": {
    "type": "object",
    "properties": {
    "low": {
    "type": "number",
    "description": "Low estimate value"
    },
    "likely": {
    "type": "number",
    "description": "Most likely value"
    },
    "high": {
    "type": "number",
    "description": "High estimate value"
    },
    "formattedLow": {
    "type": "string",
    "description": "Formatted low estimate"
    },
    "formattedLikely": {
    "type": "string",
    "description": "Formatted likely estimate"
    },
    "formattedHigh": {
    "type": "string",
    "description": "Formatted high estimate"
    },
    "confidenceScoreInPercent": {
    "type": "number",
    "description": "Confidence score as percentage"
    },
    "confidenceScoreLabel": {
    "type": "string",
    "enum": [
    "low",
    "medium",
    "high",
    "very high"
    ],
    "description": "Confidence level label"
    }
    }
    },
    "ChartData": {
    "type": "object",
    "properties": {
    "labels": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Chart labels"
    },
    "datasets": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "label": {
    "type": "string"
    },
    "data": {
    "type": "array",
    "items": {
    "type": "number"
    }
    }
    }
    }
    }
    }
    },
    "CompProperty": {
    "type": "object",
    "properties": {
    "title": {
    "type": "string"
    },
    "type": {
    "type": "string"
    },
    "address": {
    "type": "string"
    },
    "size": {
    "type": "number"
    },
    "price": {
    "type": "number"
    },
    "formattedPrice": {
    "type": "string"
    }
    }
    },
    "CompSummaryData": {
    "type": "object",
    "properties": {
    "size": {
    "type": "number"
    },
    "address": {
    "type": "string"
    },
    "price": {
    "type": "number"
    },
    "pricePerSqm": {
    "type": "number"
    },
    "formattedPrice": {
    "type": "string"
    },
    "formattedPricePerSqm": {
    "type": "string"
    },
    "date": {
    "type": "string"
    },
    "distanceKm": {
    "type": "number"
    },
    "distanceInMeters": {
    "type": "number"
    }
    }
    },
    "RentalCompSummaryData": {
    "type": "object",
    "properties": {
    "size": {
    "type": "number"
    },
    "address": {
    "type": "string"
    },
    "rent": {
    "type": "number"
    },
    "rentPerSqm": {
    "type": "number"
    },
    "formattedRent": {
    "type": "string"
    },
    "formattedRentPerSqm": {
    "type": "string"
    },
    "date": {
    "type": "string"
    },
    "distanceKm": {
    "type": "number"
    },
    "distanceInMeters": {
    "type": "number"
    }
    }
    },
    "PhilValuateAiOutput": {
    "type": "object",
    "properties": {
    "automatedValuationSummary": {
    "type": "string",
    "description": "Concise summary of valuation results including methodology"
    },
    "executiveSummary": {
    "type": "string",
    "description": "High-level 2-3 sentence summary with key numbers and context"
    },
    "keyFindings": {
    "type": "string",
    "description": "Bullet-point list of notable findings and insights"
    },
    "valuationRangeSales": {
    "$ref": "#/components/schemas/ValuationRange"
    },
    "valuationRangeRentals": {
    "$ref": "#/components/schemas/ValuationRange"
    },
    "salesTrendChartData": {
    "$ref": "#/components/schemas/ChartData"
    },
    "rentalTrendChartData": {
    "$ref": "#/components/schemas/ChartData"
    },
    "compMapData": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CompProperty"
    }
    },
    "compComparisonChartData": {
    "$ref": "#/components/schemas/ChartData"
    },
    "keyMetrics": {
    "type": "object",
    "properties": {
    "grossYieldPct": {
    "type": "number",
    "description": "Gross yield percentage"
    },
    "netYieldPct": {
    "type": "number",
    "description": "Net yield percentage"
    },
    "capRatePct": {
    "type": "number",
    "description": "Capitalization rate percentage"
    },
    "birZonalValue": {
    "type": "number",
    "nullable": true,
    "description": "BIR zonal value"
    },
    "lguAssessedValue": {
    "type": "number",
    "nullable": true,
    "description": "LGU assessed value"
    }
    }
    },
    "salesCompSummaryTableData": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CompSummaryData"
    }
    },
    "rentalCompSummaryTableData": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/RentalCompSummaryData"
    }
    },
    "subjectFloorAreaSqm": {
    "type": "number",
    "description": "Subject property floor area in sqm"
    },
    "subjectLotAreaSqm": {
    "type": "number",
    "description": "Subject property lot area in sqm"
    },
    "subjectBedrooms": {
    "type": "number",
    "description": "Number of bedrooms"
    },
    "subjectBathrooms": {
    "type": "number",
    "description": "Number of bathrooms"
    },
    "warehouseCeilingHeightM": {
    "type": "number",
    "description": "Warehouse ceiling height in meters"
    },
    "lotZoning": {
    "type": "string",
    "description": "Lot zoning classification"
    },
    "lotTerrain": {
    "type": "string",
    "description": "Lot terrain description"
    },
    "estimatedSaleValue_Low": {
    "type": "number"
    },
    "estimatedSaleValue_Likely": {
    "type": "number"
    },
    "estimatedSaleValue_High": {
    "type": "number"
    },
    "salesConfidenceScore": {
    "type": "string"
    },
    "estimatedRentalValue_Low": {
    "type": "number"
    },
    "estimatedRentalValue_Likely": {
    "type": "number"
    },
    "estimatedRentalValue_High": {
    "type": "number"
    },
    "rentalConfidenceScore": {
    "type": "string"
    },
    "metric_EstPricePerSqm_Floor": {
    "type": "number"
    },
    "metric_EstPricePerSqm_Lot": {
    "type": "number"
    },
    "metric_EstGrossYieldPct": {
    "type": "number"
    },
    "metric_EstNetYieldPct": {
    "type": "number"
    },
    "metric_EstCapRatePct": {
    "type": "number"
    },
    "microMarket_ID": {
    "type": "string"
    },
    "microMarket_AvgDOM": {
    "type": "number",
    "description": "Average days on market"
    },
    "microMarket_ActiveListings": {
    "type": "number",
    "description": "Number of active listings in the micro market"
    }
    }
    },
    "CreatePropertyTypeInput": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "description": "Property type name"
    }
    }
    },
    "UpdatePropertyTypeInput": {
    "type": "object",
    "required": [
    "name"
    ],
    "properties": {
    "name": {
    "type": "string",
    "minLength": 1,
    "description": "Property type name"
    }
    }
    },
    "PropertyType": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Unique identifier"
    },
    "name": {
    "type": "string",
    "description": "Property type name"
    },
    "disabled": {
    "type": "boolean",
    "description": "Whether the property type is disabled"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "PropertyTypeResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/PropertyType"
    }
    }
    },
    "PropertyTypesListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/PropertyType"
    }
    }
    }
    },
    "CreatePropertyTypeResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "string",
    "format": "uuid",
    "description": "ID of the created property type"
    }
    }
    },
    "CreateUrlInput": {
    "type": "object",
    "required": [
    "url",
    "propertyType",
    "listingType"
    ],
    "properties": {
    "url": {
    "type": "string",
    "format": "url",
    "description": "URL to be scraped"
    },
    "propertyType": {
    "type": "string",
    "minLength": 1,
    "description": "Type of property"
    },
    "listingType": {
    "type": "string",
    "minLength": 1,
    "description": "Type of listing"
    },
    "isProcessed": {
    "type": "boolean",
    "default": false,
    "description": "Whether the URL has been processed"
    }
    }
    },
    "UpdateUrlInput": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url",
    "description": "URL to be scraped"
    },
    "isProcessed": {
    "type": "boolean",
    "description": "Whether the URL has been processed"
    }
    }
    },
    "Url": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Unique identifier"
    },
    "url": {
    "type": "string",
    "description": "URL to be scraped"
    },
    "propertyType": {
    "type": "string",
    "description": "Type of property"
    },
    "listingType": {
    "type": "string",
    "description": "Type of listing"
    },
    "isProcessed": {
    "type": "boolean",
    "description": "Whether the URL has been processed"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "CreateScrapeInput": {
    "type": "object",
    "required": [
    "data",
    "source",
    "sourceUrl",
    "propertyType",
    "listingType"
    ],
    "properties": {
    "data": {
    "type": "object",
    "additionalProperties": true,
    "description": "Scraped data as JSON object"
    },
    "source": {
    "type": "string",
    "minLength": 1,
    "description": "Source website identifier"
    },
    "sourceUrl": {
    "type": "string",
    "format": "url",
    "description": "URL where data was scraped from"
    },
    "propertyType": {
    "type": "string",
    "minLength": 1,
    "description": "Type of property"
    },
    "listingType": {
    "type": "string",
    "minLength": 1,
    "description": "Type of listing"
    },
    "isProcessed": {
    "type": "boolean",
    "default": false,
    "description": "Whether the data has been processed"
    }
    }
    },
    "UpdateScrapeInput": {
    "type": "object",
    "properties": {
    "data": {
    "type": "object",
    "additionalProperties": true,
    "description": "Scraped data as JSON object"
    },
    "source": {
    "type": "string",
    "minLength": 1,
    "description": "Source website identifier"
    },
    "sourceUrl": {
    "type": "string",
    "format": "url",
    "description": "URL where data was scraped from"
    },
    "propertyType": {
    "type": "string",
    "minLength": 1,
    "description": "Type of property"
    },
    "listingType": {
    "type": "string",
    "minLength": 1,
    "description": "Type of listing"
    },
    "isProcessed": {
    "type": "boolean",
    "description": "Whether the data has been processed"
    },
    "processedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Processing timestamp"
    }
    }
    },
    "Scrape": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Unique identifier"
    },
    "data": {
    "type": "object",
    "additionalProperties": true,
    "description": "Scraped data as JSON object"
    },
    "source": {
    "type": "string",
    "description": "Source website identifier"
    },
    "sourceUrl": {
    "type": "string",
    "description": "URL where data was scraped from"
    },
    "propertyType": {
    "type": "string",
    "description": "Type of property"
    },
    "listingType": {
    "type": "string",
    "description": "Type of listing"
    },
    "isProcessed": {
    "type": "boolean",
    "description": "Whether the data has been processed"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "processedAt": {
    "type": "string",
    "format": "date-time",
    "nullable": true,
    "description": "Processing timestamp"
    }
    }
    },
    "ProcessingSummaryInput": {
    "type": "object",
    "required": [
    "summary",
    "successful_urls",
    "failed_urls"
    ],
    "properties": {
    "summary": {
    "type": "object",
    "required": [
    "total_urls",
    "total_processed",
    "total_failed",
    "success_rate",
    "processing_started_at",
    "processing_completed_at"
    ],
    "properties": {
    "total_urls": {
    "type": "integer",
    "minimum": 0,
    "description": "Total number of URLs"
    },
    "total_processed": {
    "type": "integer",
    "minimum": 0,
    "description": "Total successfully processed"
    },
    "total_failed": {
    "type": "integer",
    "minimum": 0,
    "description": "Total failed processing"
    },
    "success_rate": {
    "type": "number",
    "minimum": 0,
    "maximum": 100,
    "description": "Success rate percentage"
    },
    "processing_started_at": {
    "type": "string",
    "format": "date-time",
    "description": "Processing start time"
    },
    "processing_completed_at": {
    "type": "string",
    "format": "date-time",
    "description": "Processing completion time"
    }
    }
    },
    "successful_urls": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url_id": {
    "type": "string",
    "format": "uuid"
    },
    "scrape_id": {
    "type": "string",
    "format": "uuid"
    },
    "property_title": {
    "type": "string"
    },
    "property_type": {
    "type": "string"
    },
    "price": {
    "type": "number"
    },
    "phone_extracted": {
    "type": "boolean"
    },
    "agent_name": {
    "type": "string"
    },
    "processed_at": {
    "type": "string",
    "format": "date-time"
    }
    }
    }
    },
    "failed_urls": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url_id": {
    "type": "string",
    "format": "uuid"
    },
    "error": {
    "type": "string"
    },
    "error_type": {
    "type": "string",
    "enum": [
    "TIMEOUT_ERROR",
    "NAVIGATION_ERROR",
    "ELEMENT_NOT_FOUND",
    "CONTACT_EXTRACTION_ERROR",
    "DATALAYER_ERROR",
    "NETWORK_ERROR",
    "API_ERROR",
    "UNKNOWN_ERROR"
    ]
    },
    "processed_at": {
    "type": "string",
    "format": "date-time"
    }
    }
    }
    }
    }
    },
    "UrlListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Url"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "ScrapeListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Scrape"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "UrlStats": {
    "type": "object",
    "properties": {
    "total": {
    "type": "integer",
    "description": "Total number of URLs"
    },
    "processed": {
    "type": "integer",
    "description": "Number of processed URLs"
    },
    "unprocessed": {
    "type": "integer",
    "description": "Number of unprocessed URLs"
    },
    "processingRate": {
    "type": "number",
    "description": "Percentage of processed URLs"
    }
    }
    },
    "ScrapeStats": {
    "type": "object",
    "properties": {
    "total": {
    "type": "integer",
    "description": "Total number of scrape records"
    },
    "processed": {
    "type": "integer",
    "description": "Number of processed records"
    },
    "unprocessed": {
    "type": "integer",
    "description": "Number of unprocessed records"
    },
    "bySource": {
    "type": "object",
    "additionalProperties": {
    "type": "integer"
    }
    },
    "byPropertyType": {
    "type": "object",
    "additionalProperties": {
    "type": "integer"
    }
    },
    "byListingType": {
    "type": "object",
    "additionalProperties": {
    "type": "integer"
    }
    }
    }
    },
    "VacantLot": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Vacant lot ID"
    },
    "propertyId": {
    "type": "string",
    "format": "uuid",
    "description": "Related property ID"
    },
    "lotSize": {
    "type": "number",
    "nullable": true,
    "description": "Lot size in square meters"
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "nullable": true,
    "description": "Number of parking spaces"
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string",
    "enum": [
    "business_district",
    "nearby_school",
    "near_hospital",
    "nearby_amusements",
    "near_mall"
    ]
    },
    "description": "List of nearby locations"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "VacantLotWithProperty": {
    "type": "object",
    "allOf": [
    {
    "$ref": "#/components/schemas/VacantLot"
    },
    {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property",
    "example": false
    }
    }
    }
    ]
    },
    "CreateVacantLotPropertyData": {
    "type": "object",
    "required": [
    "userId",
    "propertyTypeId",
    "listingTypeId",
    "listingTitle"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "address": {
    "type": "string"
    },
    "region": {
    "type": "string"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    },
    "isPublished": {
    "type": "boolean",
    "default": false
    }
    }
    },
    "CreateVacantLotData": {
    "type": "object",
    "required": [
    "lotSize"
    ],
    "properties": {
    "lotSize": {
    "type": "number",
    "minimum": 0,
    "description": "Lot size in square meters"
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string",
    "enum": [
    "business_district",
    "nearby_school",
    "near_hospital",
    "nearby_amusements",
    "near_mall"
    ]
    }
    }
    }
    },
    "CreateVacantLotInput": {
    "type": "object",
    "required": [
    "propertyData",
    "vacantLotData"
    ],
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateVacantLotPropertyData"
    },
    "vacantLotData": {
    "$ref": "#/components/schemas/CreateVacantLotData"
    }
    }
    },
    "UpdateVacantLotInput": {
    "type": "object",
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateVacantLotPropertyData"
    },
    "vacantLotData": {
    "type": "object",
    "properties": {
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string",
    "enum": [
    "business_district",
    "nearby_school",
    "near_hospital",
    "nearby_amusements",
    "near_mall"
    ]
    }
    }
    }
    }
    }
    },
    "CreateVacantLotCompleteInput": {
    "type": "object",
    "required": [
    "userId",
    "listingTypeId",
    "propertyTypeId",
    "listingTitle",
    "listingPrice"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string",
    "enum": [
    "business_district",
    "nearby_school",
    "near_hospital",
    "nearby_amusements",
    "near_mall"
    ]
    }
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "photos": {
    "type": "array",
    "minItems": 3,
    "maxItems": 20,
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "pricePerSqm": {
    "type": "number",
    "minimum": 0
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    }
    }
    },
    "SaveVacantLotDraftInput": {
    "type": "object",
    "required": [
    "userId"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "isDraft": {
    "type": "boolean",
    "enum": [
    true
    ],
    "default": true
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string",
    "enum": [
    "business_district",
    "nearby_school",
    "near_hospital",
    "nearby_amusements",
    "near_mall"
    ]
    }
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "photos": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "pricePerSqm": {
    "type": "number",
    "minimum": 0
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    }
    }
    },
    "PublishVacantLotInput": {
    "allOf": [
    {
    "$ref": "#/components/schemas/CreateVacantLotCompleteInput"
    },
    {
    "type": "object",
    "required": [
    "isDraft",
    "isPublished"
    ],
    "properties": {
    "isDraft": {
    "type": "boolean",
    "enum": [
    false
    ]
    },
    "isPublished": {
    "type": "boolean",
    "enum": [
    true
    ]
    }
    }
    }
    ]
    },
    "VacantLotListingSummary": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Vacant lot ID"
    },
    "lotSize": {
    "type": "number",
    "nullable": true,
    "description": "Lot size in square meters"
    },
    "property": {
    "$ref": "#/components/schemas/PropertySummary"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property"
    }
    }
    },
    "VacantLotListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/VacantLotListingSummary"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "CreateVacantLotResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "vacantLot": {
    "$ref": "#/components/schemas/VacantLot"
    }
    }
    }
    }
    },
    "Property": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Property ID"
    },
    "userId": {
    "type": "string",
    "format": "uuid",
    "description": "User ID who owns the property"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid",
    "description": "Property type ID"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid",
    "description": "Listing type ID"
    },
    "listingTitle": {
    "type": "string",
    "description": "Listing title"
    },
    "listingDescription": {
    "type": "string",
    "nullable": true,
    "description": "Listing description"
    },
    "listingPrice": {
    "type": "number",
    "nullable": true,
    "description": "Listing price"
    },
    "listingPriceFormatted": {
    "type": "string",
    "nullable": true,
    "description": "Formatted listing price"
    },
    "cityId": {
    "type": "string",
    "format": "uuid",
    "nullable": true,
    "description": "City ID"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid",
    "nullable": true,
    "description": "Barangay ID"
    },
    "streetAddress": {
    "type": "string",
    "nullable": true,
    "description": "Street address"
    },
    "address": {
    "type": "string",
    "nullable": true,
    "description": "Complete address"
    },
    "region": {
    "type": "string",
    "nullable": true,
    "description": "Region"
    },
    "longitude": {
    "type": "number",
    "nullable": true,
    "description": "Longitude coordinate"
    },
    "latitude": {
    "type": "number",
    "nullable": true,
    "description": "Latitude coordinate"
    },
    "isDraft": {
    "type": "boolean",
    "description": "Whether the listing is a draft"
    },
    "isPublished": {
    "type": "boolean",
    "description": "Whether the listing is published"
    },
    "scrapeId": {
    "type": "string",
    "format": "uuid",
    "nullable": true,
    "description": "Related scrape ID"
    },
    "scrapeContactInfo": {
    "type": "object",
    "nullable": true,
    "description": "Contact info from scraped data",
    "properties": {
    "agentName": {
    "type": "string",
    "example": "Leyde Francisco"
    },
    "agencyName": {
    "type": "string",
    "example": "Cebu Globenet Realty"
    },
    "phoneNumber": {
    "type": "string",
    "example": 639209214237
    },
    "extractedAt": {
    "type": "string",
    "format": "date-time",
    "example": "2025-06-01T05:00:00.344Z"
    }
    }
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    },
    "images": {
    "type": "array",
    "description": "Property images",
    "items": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
    },
    "imageUrl": {
    "type": "string",
    "format": "url",
    "example": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    }
    }
    }
    }
    }
    },
    "Warehouse": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Warehouse ID"
    },
    "propertyId": {
    "type": "string",
    "format": "uuid",
    "description": "Related property ID"
    },
    "buildingSize": {
    "type": "number",
    "nullable": true,
    "description": "Building size in square meters"
    },
    "lotSize": {
    "type": "number",
    "nullable": true,
    "description": "Lot size in square meters"
    },
    "floorArea": {
    "type": "number",
    "nullable": true,
    "description": "Floor area in square meters"
    },
    "ceilingHeight": {
    "type": "number",
    "nullable": true,
    "description": "Ceiling height in meters"
    },
    "loadingDocks": {
    "type": "integer",
    "nullable": true,
    "description": "Number of loading docks"
    },
    "yearBuilt": {
    "type": "integer",
    "nullable": true,
    "description": "Year the warehouse was built"
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "nullable": true,
    "description": "Number of parking spaces"
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "List of nearby locations"
    },
    "securityFeatures": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "List of security features"
    },
    "hasLoadingBay": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the warehouse has a loading bay"
    },
    "hasFireSprinklers": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the warehouse has fire sprinklers"
    },
    "hasSecuritySystem": {
    "type": "boolean",
    "nullable": true,
    "description": "Whether the warehouse has a security system"
    },
    "createdAt": {
    "type": "string",
    "format": "date-time",
    "description": "Creation timestamp"
    },
    "updatedAt": {
    "type": "string",
    "format": "date-time",
    "description": "Last update timestamp"
    }
    }
    },
    "WarehouseWithProperty": {
    "type": "object",
    "allOf": [
    {
    "$ref": "#/components/schemas/Warehouse"
    },
    {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property",
    "example": false
    }
    }
    }
    ]
    },
    "CreateWarehousePropertyData": {
    "type": "object",
    "required": [
    "userId",
    "propertyTypeId",
    "listingTypeId",
    "listingTitle"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "address": {
    "type": "string"
    },
    "region": {
    "type": "string"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    },
    "isPublished": {
    "type": "boolean",
    "default": false
    }
    }
    },
    "CreateWarehouseData": {
    "type": "object",
    "properties": {
    "buildingSize": {
    "type": "number",
    "minimum": 0
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "ceilingHeight": {
    "type": "number",
    "minimum": 0
    },
    "loadingDocks": {
    "type": "integer",
    "minimum": 0
    },
    "yearBuilt": {
    "type": "integer"
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "securityFeatures": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "hasLoadingBay": {
    "type": "boolean"
    },
    "hasFireSprinklers": {
    "type": "boolean"
    },
    "hasSecuritySystem": {
    "type": "boolean"
    }
    }
    },
    "CreateWarehouseInput": {
    "type": "object",
    "required": [
    "propertyData",
    "warehouseData"
    ],
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateWarehousePropertyData"
    },
    "warehouseData": {
    "$ref": "#/components/schemas/CreateWarehouseData"
    }
    }
    },
    "UpdateWarehouseInput": {
    "type": "object",
    "properties": {
    "propertyData": {
    "$ref": "#/components/schemas/CreateWarehousePropertyData"
    },
    "warehouseData": {
    "$ref": "#/components/schemas/CreateWarehouseData"
    }
    }
    },
    "CreateWarehouseCompleteInput": {
    "type": "object",
    "required": [
    "userId",
    "listingTypeId",
    "propertyTypeId",
    "listingTitle"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "securityFeatures": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "ceilingHeight": {
    "type": "number",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "amenityIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "featureIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "photos": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "buildingSize": {
    "type": "number",
    "minimum": 0
    },
    "loadingDocks": {
    "type": "integer",
    "minimum": 0
    },
    "yearBuilt": {
    "type": "integer"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    },
    "isDraft": {
    "type": "boolean",
    "default": true
    }
    }
    },
    "SaveWarehouseDraftInput": {
    "type": "object",
    "required": [
    "userId"
    ],
    "properties": {
    "userId": {
    "type": "string",
    "format": "uuid"
    },
    "isDraft": {
    "type": "boolean",
    "enum": [
    true
    ],
    "default": true
    },
    "listingTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "propertyTypeId": {
    "type": "string",
    "format": "uuid"
    },
    "streetAddress": {
    "type": "string"
    },
    "barangayId": {
    "type": "string",
    "format": "uuid"
    },
    "cityId": {
    "type": "string",
    "format": "uuid"
    },
    "region": {
    "type": "string"
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "securityFeatures": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "lotSize": {
    "type": "number",
    "minimum": 0
    },
    "floorArea": {
    "type": "number",
    "minimum": 0
    },
    "ceilingHeight": {
    "type": "number",
    "minimum": 0
    },
    "numberOfParkingSpaces": {
    "type": "integer",
    "minimum": 0
    },
    "amenityIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "featureIds": {
    "type": "array",
    "items": {
    "type": "string",
    "format": "uuid"
    }
    },
    "photos": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "url": {
    "type": "string",
    "format": "url"
    },
    "caption": {
    "type": "string"
    },
    "order": {
    "type": "integer",
    "minimum": 0
    }
    }
    }
    },
    "listingTitle": {
    "type": "string",
    "minLength": 1
    },
    "listingDescription": {
    "type": "string"
    },
    "listingPrice": {
    "type": "number",
    "minimum": 0
    },
    "listingPriceFormatted": {
    "type": "string"
    },
    "buildingSize": {
    "type": "number",
    "minimum": 0
    },
    "loadingDocks": {
    "type": "integer",
    "minimum": 0
    },
    "yearBuilt": {
    "type": "integer"
    },
    "longitude": {
    "type": "number"
    },
    "latitude": {
    "type": "number"
    }
    }
    },
    "PublishWarehouseInput": {
    "allOf": [
    {
    "$ref": "#/components/schemas/CreateWarehouseCompleteInput"
    },
    {
    "type": "object",
    "required": [
    "isDraft",
    "isPublished"
    ],
    "properties": {
    "isDraft": {
    "type": "boolean",
    "enum": [
    false
    ]
    },
    "isPublished": {
    "type": "boolean",
    "enum": [
    true
    ]
    }
    }
    }
    ]
    },
    "WarehouseListingSummary": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid",
    "description": "Warehouse ID"
    },
    "buildingSize": {
    "type": "number",
    "nullable": true,
    "description": "Building size in square meters"
    },
    "lotSize": {
    "type": "number",
    "nullable": true,
    "description": "Lot size in square meters"
    },
    "floorArea": {
    "type": "number",
    "nullable": true,
    "description": "Floor area in square meters"
    },
    "ceilingHeight": {
    "type": "number",
    "nullable": true,
    "description": "Ceiling height in meters"
    },
    "loadingDocks": {
    "type": "integer",
    "nullable": true,
    "description": "Number of loading docks"
    },
    "property": {
    "$ref": "#/components/schemas/PropertySummary"
    },
    "isLiked": {
    "type": "boolean",
    "description": "Whether the current authenticated user has liked this property"
    }
    }
    },
    "WarehouseListResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/WarehouseListingSummary"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    },
    "CreateWarehouseResponse": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "property": {
    "$ref": "#/components/schemas/Property"
    },
    "warehouse": {
    "$ref": "#/components/schemas/Warehouse"
    }
    }
    }
    }
    }
    }
    },
    "paths": {
    "/v1/api-keys": {
    "get": {
    "summary": "List API keys",
    "description": "Retrieve a paginated list of API keys for the authenticated user",
    "tags": [
    "API Keys"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Number of items per page"
    },
    {
    "name": "isActive",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by active status"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved API keys",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ApiKeyListResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new API key",
    "description": "Create a new API key for the authenticated user. The actual key value is only returned once during creation.",
    "tags": [
    "API Keys"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateApiKeyRequest"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created API key",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/ApiKey"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/api-keys/{id}": {
    "get": {
    "summary": "Get an API key",
    "description": "Retrieve details of a specific API key owned by the authenticated user",
    "tags": [
    "API Keys"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string"
    },
    "description": "API key ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved API key",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/ApiKey"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "API key not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "patch": {
    "summary": "Update an API key",
    "description": "Update properties of an existing API key owned by the authenticated user",
    "tags": [
    "API Keys"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string"
    },
    "description": "API key ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateApiKeyRequest"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated API key",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/ApiKey"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "API key not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete an API key",
    "description": "Permanently delete an API key owned by the authenticated user",
    "tags": [
    "API Keys"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string"
    },
    "description": "API key ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted API key",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "API key not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/aws-s3": {
    "post": {
    "summary": "Upload file to S3",
    "description": "Upload a file to S3/DigitalOcean Spaces. The file will be stored in appropriate folder based on its type:\n- Images are stored in `/images/` folder\n- Other files are stored in `/assets/` folder\n\nImage optimization:\n- JPEG, JPG, and PNG images are automatically converted to WebP format for better performance\n- The response URL will have .webp extension for optimized images\n- Other image formats and file types are uploaded as-is\n",
    "tags": [
    "AWS S3"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "multipart/form-data": {
    "schema": {
    "type": "object",
    "required": [
    "file"
    ],
    "properties": {
    "file": {
    "type": "string",
    "format": "binary",
    "description": "The file to upload"
    }
    }
    },
    "examples": {
    "imageUpload": {
    "summary": "Upload an image",
    "value": {
    "file": "(binary image data)"
    }
    },
    "documentUpload": {
    "summary": "Upload a document",
    "value": {
    "file": "(binary document data)"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "File uploaded successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/S3UploadResponse"
    },
    "examples": {
    "imageUpload": {
    "summary": "Image upload response",
    "value": {
    "success": true,
    "url": "https://cdn.listd.xyz/listd/images/property-photo.webp"
    }
    },
    "documentUpload": {
    "summary": "Document upload response",
    "value": {
    "success": true,
    "url": "https://cdn.listd.xyz/listd/assets/contract.pdf"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Invalid or missing file",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    },
    "examples": {
    "missingFile": {
    "summary": "Missing file",
    "value": {
    "success": false,
    "error": {
    "code": "INVALID_FILE",
    "message": "Missing or invalid file field"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Upload failed",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    },
    "examples": {
    "uploadFailed": {
    "summary": "S3 upload error",
    "value": {
    "success": false,
    "error": {
    "code": "UPLOAD_FAILED",
    "message": "Failed to upload file to S3"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/building-search/address/autocomplete": {
    "post": {
    "summary": "Search for addresses with autocomplete",
    "description": "Search for any address and get autocomplete suggestions suitable for form filling",
    "tags": [
    "Address & Building Search"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "query"
    ],
    "properties": {
    "query": {
    "type": "string",
    "description": "Address or location to search",
    "minLength": 1
    },
    "country": {
    "type": "string",
    "description": "Country code to restrict search (default is 'ph' for Philippines)",
    "default": "ph"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "List of address autocomplete predictions",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "placeId": {
    "type": "string"
    },
    "description": {
    "type": "string"
    },
    "mainText": {
    "type": "string"
    },
    "secondaryText": {
    "type": "string"
    },
    "types": {
    "type": "array",
    "items": {
    "type": "string"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/building-search/address/search-with-details": {
    "post": {
    "summary": "Search addresses and get parsed components",
    "description": "Search for an address and if there's only one result, automatically fetch and parse its components",
    "tags": [
    "Address & Building Search"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "query"
    ],
    "properties": {
    "query": {
    "type": "string",
    "description": "Address to search",
    "minLength": 1
    },
    "country": {
    "type": "string",
    "description": "Country code to restrict search",
    "default": "ph"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Search results with optional parsed address components",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "object",
    "properties": {
    "predictions": {
    "type": "array",
    "items": {
    "type": "object"
    }
    },
    "details": {
    "type": "object",
    "description": "Only included if there's exactly one prediction",
    "properties": {
    "formattedAddress": {
    "type": "string"
    },
    "addressComponents": {
    "type": "object",
    "properties": {
    "streetName": {
    "type": "string",
    "description": "Full street address"
    },
    "barangay": {
    "type": "string"
    },
    "city": {
    "type": "string"
    },
    "region": {
    "type": "string"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/building-search/autocomplete": {
    "post": {
    "summary": "Search for buildings/places with autocomplete",
    "description": "Search for buildings, establishments, or addresses and get autocomplete suggestions",
    "tags": [
    "Address & Building Search"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "query"
    ],
    "properties": {
    "query": {
    "type": "string",
    "description": "Building name or address to search",
    "minLength": 1
    },
    "country": {
    "type": "string",
    "description": "Country code to restrict search (default is 'ph' for Philippines)",
    "default": "ph"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "List of autocomplete predictions",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "placeId": {
    "type": "string"
    },
    "description": {
    "type": "string"
    },
    "mainText": {
    "type": "string"
    },
    "secondaryText": {
    "type": "string"
    },
    "types": {
    "type": "array",
    "items": {
    "type": "string"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/building-search/details/{placeId}": {
    "get": {
    "summary": "Get detailed place information with parsed address components",
    "description": "Retrieve detailed information about a place including parsed address components for Philippines",
    "tags": [
    "Address & Building Search"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "in": "path",
    "name": "placeId",
    "required": true,
    "schema": {
    "type": "string"
    },
    "description": "Google Places ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Place details with parsed address components",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "object",
    "properties": {
    "placeId": {
    "type": "string"
    },
    "name": {
    "type": "string"
    },
    "formattedAddress": {
    "type": "string"
    },
    "addressComponents": {
    "type": "object",
    "properties": {
    "streetNumber": {
    "type": "string"
    },
    "streetName": {
    "type": "string"
    },
    "barangay": {
    "type": "string"
    },
    "city": {
    "type": "string"
    },
    "province": {
    "type": "string"
    },
    "region": {
    "type": "string"
    },
    "country": {
    "type": "string"
    },
    "postalCode": {
    "type": "string"
    }
    }
    },
    "location": {
    "type": "object",
    "properties": {
    "lat": {
    "type": "number"
    },
    "lng": {
    "type": "number"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/building-search/search-with-details": {
    "post": {
    "summary": "Search buildings and auto-fetch details if single result",
    "description": "Search for buildings and automatically fetch details if there's only one result",
    "tags": [
    "Address & Building Search"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "query"
    ],
    "properties": {
    "query": {
    "type": "string",
    "description": "Building name or address to search",
    "minLength": 1
    },
    "country": {
    "type": "string",
    "description": "Country code to restrict search",
    "default": "ph"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Search results with optional details",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "object",
    "properties": {
    "predictions": {
    "type": "array",
    "items": {
    "type": "object"
    }
    },
    "details": {
    "type": "object",
    "description": "Only included if there's exactly one prediction"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/bullmq/enqueue-job": {
    "post": {
    "summary": "Enqueue a background job (Recommended for valuations)",
    "description": "Enqueues a job for asynchronous processing. Currently supports valuation jobs\nthat run the PhilValuate AI service in the background.\n\n**This is the recommended endpoint for property valuations** as it provides:\n- No timeout issues for complex valuations\n- Job tracking and status monitoring\n- Automatic retry on failures\n- Better scalability under high load\n\nJob lifecycle:\n- Jobs are queued immediately and return a job ID\n- Use the job ID to check status and retrieve results\n- Completed jobs are retained for 1 hour or up to 1000 jobs\n- Failed jobs are retained for 24 hours\n",
    "tags": [
    "BullMQ Jobs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/WebResearchAiInput"
    },
    "examples": {
    "valuationJob": {
    "summary": "Property valuation job",
    "value": {
    "query": {
    "propertyType": "Condominium",
    "propertySize": 65,
    "buildingName": "Greenbelt Madison",
    "propertyAddress": "Legaspi Street, Makati City",
    "propertyFeatures": [
    "2BR",
    "2BA",
    "Balcony"
    ],
    "propertyAmenities": [
    "Swimming Pool",
    "Gym",
    "24/7 Security"
    ],
    "propertyDescription": "High floor unit with city view",
    "extraMetadata": {
    "floorLevel": 25,
    "facing": "North",
    "yearRenovated": 2022
    }
    },
    "searchContextSize": "medium",
    "userLocation": {
    "city": "Makati City",
    "region": "NCR"
    }
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Job enqueued successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/EnqueueJobResponse"
    },
    "examples": {
    "success": {
    "summary": "Job enqueued",
    "value": {
    "success": true,
    "jobId": "1234567890"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Invalid input data",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Failed to enqueue job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    },
    "examples": {
    "queueError": {
    "summary": "Queue error",
    "value": {
    "success": false,
    "error": {
    "code": "BULLMQ_ADD_JOB_ERROR",
    "message": "Failed to create job"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/bullmq/job-status/{id}": {
    "get": {
    "summary": "Get job status and result",
    "description": "Retrieves the current status and result (if completed) of a background job.\n\nJob states:\n- **waiting**: Job is waiting to be processed\n- **active**: Job is currently being processed\n- **completed**: Job finished successfully (result available)\n- **failed**: Job failed (error details available)\n- **delayed**: Job is delayed and will be processed later\n- **paused**: Job queue is paused\n\nThe response includes processing duration for completed/failed jobs.\n",
    "tags": [
    "BullMQ Jobs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string"
    },
    "description": "The job ID returned from enqueue-job",
    "example": "1234567890"
    }
    ],
    "responses": {
    "200": {
    "description": "Job status retrieved successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/JobStatus"
    },
    "examples": {
    "waiting": {
    "summary": "Job waiting",
    "value": {
    "success": false,
    "data": {
    "id": "1234567890",
    "name": "valuation",
    "state": "waiting",
    "result": null,
    "failedReason": null,
    "attemptsMade": 0,
    "processedOn": null,
    "finishedOn": null,
    "durationSeconds": null
    }
    }
    },
    "active": {
    "summary": "Job processing",
    "value": {
    "success": false,
    "data": {
    "id": "1234567890",
    "name": "valuation",
    "state": "active",
    "result": null,
    "failedReason": null,
    "attemptsMade": 1,
    "processedOn": 1673888400000,
    "finishedOn": null,
    "durationSeconds": null
    }
    }
    },
    "completed": {
    "summary": "Job completed",
    "value": {
    "success": true,
    "data": {
    "id": "1234567890",
    "name": "valuation",
    "state": "completed",
    "result": {
    "executiveSummary": "Property valued at ₱5.2M-₱6.1M...",
    "valuationRangeSales": {
    "low": 5200000,
    "likely": 5650000,
    "high": 6100000
    }
    },
    "failedReason": null,
    "attemptsMade": 1,
    "processedOn": 1673888400000,
    "finishedOn": 1673888430000,
    "durationSeconds": 30
    }
    }
    },
    "failed": {
    "summary": "Job failed",
    "value": {
    "success": false,
    "data": {
    "id": "1234567890",
    "name": "valuation",
    "state": "failed",
    "result": null,
    "failedReason": {
    "message": "AI service unavailable",
    "code": "AI_SERVICE_ERROR"
    },
    "attemptsMade": 3,
    "processedOn": 1673888400000,
    "finishedOn": 1673888500000,
    "durationSeconds": 100
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Job not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    },
    "examples": {
    "notFound": {
    "summary": "Job not found",
    "value": {
    "success": false,
    "error": {
    "code": "BULLMQ_JOB_NOT_FOUND",
    "message": "Job not found"
    }
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to retrieve job status",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums": {
    "get": {
    "summary": "Get all condominiums",
    "description": "Retrieve a paginated list of condominium listings with optional filters",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Items per page"
    },
    {
    "name": "search",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Search term for title, description, or address"
    },
    {
    "name": "minPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum listing price"
    },
    {
    "name": "maxPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum listing price"
    },
    {
    "name": "minBedrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Minimum number of bedrooms"
    },
    {
    "name": "maxBedrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Maximum number of bedrooms"
    },
    {
    "name": "minBathrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Minimum number of bathrooms"
    },
    {
    "name": "maxBathrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Maximum number of bathrooms"
    },
    {
    "name": "minFloorArea",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum floor area in square meters"
    },
    {
    "name": "maxFloorArea",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum floor area in square meters"
    },
    {
    "name": "userId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by user ID"
    },
    {
    "name": "propertyTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by property type ID"
    },
    {
    "name": "listingTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by listing type ID"
    },
    {
    "name": "cityId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by city ID"
    },
    {
    "name": "barangayId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by barangay ID"
    },
    {
    "name": "isDraft",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by draft status"
    },
    {
    "name": "isPublished",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by published status"
    },
    {
    "name": "longitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Center longitude for location-based search"
    },
    {
    "name": "latitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Center latitude for location-based search"
    },
    {
    "name": "radius",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 0
    },
    "description": "Search radius in meters (defaults to 10km)"
    },
    {
    "name": "minLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Minimum longitude for bounding box search"
    },
    {
    "name": "maxLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Maximum longitude for bounding box search"
    },
    {
    "name": "minLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Minimum latitude for bounding box search"
    },
    {
    "name": "maxLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Maximum latitude for bounding box search"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved condominiums",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CondominiumListResponse"
    },
    "example": {
    "success": true,
    "data": [
    {
    "id": "6b216739-400f-45b1-a5a9-de816667dd9a",
    "buildingName": "Other",
    "floorArea": 33,
    "numberOfBedrooms": 2,
    "numberOfBathrooms": 1,
    "property": {
    "id": "b4a6640d-90eb-445b-ad4e-c640a1f56fd3",
    "listingTitle": "2 bedroom fully furnished unit near Davao Airport for rent",
    "listingPrice": 1800,
    "listingPriceFormatted": "₱1,800",
    "address": "Sasa, Davao",
    "cityName": "Davao",
    "barangayName": "Sasa",
    "longitude": 125.648968,
    "latitude": 7.128006,
    "propertyTypeName": "Condominium",
    "listingTypeName": "Rent",
    "scrapeContactInfo": {
    "agentName": "Joycelyn Carriedo",
    "agencyName": "K LAND PROPERTY CORPORATION",
    "extractedAt": "2025-06-01T09:49:43.901Z",
    "phoneNumber": "+639362649815"
    },
    "images": [
    {
    "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    },
    {
    "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
    "imageUrl": "https://pic2.ajkimg.com/display/anjuke/b1234d/720x540c.jpg"
    }
    ]
    },
    "isLiked": false
    }
    ],
    "meta": {
    "total": 100,
    "page": 1,
    "pageSize": 20,
    "totalPages": 5,
    "nextPage": 2,
    "prevPage": null
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new condominium (legacy)",
    "description": "Create a new condominium listing using the legacy endpoint",
    "deprecated": true,
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateCondominiumInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created condominium",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateCondominiumResponse"
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums/drafts/{userId}": {
    "get": {
    "summary": "Get user's draft condominiums",
    "description": "Retrieve all draft condominium listings for a specific user",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved draft condominiums",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums/user/{userId}": {
    "get": {
    "summary": "Get condominiums by user ID",
    "description": "Retrieve all condominium listings for a specific user",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved condominiums",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums/complete": {
    "post": {
    "summary": "Create a complete condominium",
    "description": "Create a new condominium listing with complete data from multi-step form",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateCondominiumCompleteInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created condominium",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums/draft": {
    "post": {
    "summary": "Save condominium as draft",
    "description": "Save a condominium listing as draft with partial data allowed",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/SaveCondominiumDraftInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully saved draft",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums/{id}/publish": {
    "post": {
    "summary": "Publish a condominium",
    "description": "Convert a draft condominium listing to published status",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The condominium ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/PublishCondominiumInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully published condominium",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error or missing required fields",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Condominium not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/condominiums/{id}": {
    "get": {
    "summary": "Get condominium by ID",
    "description": "Retrieve a specific condominium listing by its ID",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The condominium ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved condominium",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    },
    "example": {
    "success": true,
    "data": {
    "id": "6b216739-400f-45b1-a5a9-de816667dd9a",
    "buildingName": "Other",
    "floorNumber": null,
    "floorArea": 33,
    "furnishingStatus": null,
    "numberOfBedrooms": 2,
    "numberOfBathrooms": 1,
    "numberOfParkingSpaces": null,
    "propertyId": "b4a6640d-90eb-445b-ad4e-c640a1f56fd3",
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "property": {
    "id": "b4a6640d-90eb-445b-ad4e-c640a1f56fd3",
    "userId": "user-123",
    "propertyTypeId": "prop-type-456",
    "listingTypeId": "list-type-789",
    "listingTitle": "2 bedroom fully furnished unit near Davao Airport for rent",
    "listingDescription": "Spacious and modern condominium unit",
    "listingDescriptionMarkdown": "### Your Dream Condo Awaits\n\nSpacious and modern **condominium unit** with:\n- 2 bedrooms\n- Modern amenities\n- Convenient location\n\nPerfect for urban living!",
    "listingPrice": 1800,
    "listingPriceFormatted": "₱1,800",
    "cityId": "city-123",
    "barangayId": "brgy-456",
    "streetAddress": null,
    "address": "Sasa, Davao",
    "region": "Davao Region",
    "longitude": 125.648968,
    "latitude": 7.128006,
    "isDraft": false,
    "isPublished": true,
    "scrapeId": null,
    "scrapeContactInfo": {
    "agentName": "Joycelyn Carriedo",
    "agencyName": "K LAND PROPERTY CORPORATION",
    "extractedAt": "2025-06-01T09:49:43.901Z",
    "phoneNumber": "+639362649815"
    },
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "images": [
    {
    "id": "img-001",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    },
    {
    "id": "img-002",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/b2345d/720x540c.jpg"
    }
    ]
    },
    "isLiked": false
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Condominium not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "summary": "Update a condominium",
    "description": "Update an existing condominium listing",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The condominium ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateCondominiumInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated condominium",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/CondominiumWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Condominium not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a condominium",
    "description": "Delete a condominium listing and its associated property",
    "tags": [
    "Condominiums"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The condominium ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted condominium",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "Condominium listing deleted successfully"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Condominium not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots": {
    "get": {
    "summary": "Get all house and lots",
    "description": "Retrieve a paginated list of house and lot listings with optional filters",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Items per page"
    },
    {
    "name": "search",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Search term for title, description, or address"
    },
    {
    "name": "minPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum listing price"
    },
    {
    "name": "maxPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum listing price"
    },
    {
    "name": "minLotSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum lot size in square meters"
    },
    {
    "name": "maxLotSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum lot size in square meters"
    },
    {
    "name": "minFloorArea",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum floor area in square meters"
    },
    {
    "name": "maxFloorArea",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum floor area in square meters"
    },
    {
    "name": "minBedrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Minimum number of bedrooms"
    },
    {
    "name": "maxBedrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Maximum number of bedrooms"
    },
    {
    "name": "minBathrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Minimum number of bathrooms"
    },
    {
    "name": "maxBathrooms",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 0
    },
    "description": "Maximum number of bathrooms"
    },
    {
    "name": "minFloors",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1
    },
    "description": "Minimum number of floors"
    },
    {
    "name": "maxFloors",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1
    },
    "description": "Maximum number of floors"
    },
    {
    "name": "hasSwimmingPool",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by swimming pool availability"
    },
    {
    "name": "hasGarden",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by garden availability"
    },
    {
    "name": "hasTerrace",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by terrace availability"
    },
    {
    "name": "hasBalcony",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by balcony availability"
    },
    {
    "name": "hasSecurity",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by security availability"
    },
    {
    "name": "userId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by user ID"
    },
    {
    "name": "propertyTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by property type ID"
    },
    {
    "name": "listingTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by listing type ID"
    },
    {
    "name": "cityId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by city ID"
    },
    {
    "name": "barangayId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by barangay ID"
    },
    {
    "name": "isDraft",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by draft status"
    },
    {
    "name": "isPublished",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by published status"
    },
    {
    "name": "longitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Center longitude for location-based search"
    },
    {
    "name": "latitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Center latitude for location-based search"
    },
    {
    "name": "radius",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 0
    },
    "description": "Search radius in meters (defaults to 10km)"
    },
    {
    "name": "minLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Minimum longitude for bounding box search"
    },
    {
    "name": "maxLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Maximum longitude for bounding box search"
    },
    {
    "name": "minLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Minimum latitude for bounding box search"
    },
    {
    "name": "maxLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Maximum latitude for bounding box search"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved house and lots",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/HouseAndLotListResponse"
    },
    "example": {
    "success": true,
    "data": [
    {
    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "floorArea": 120,
    "lotSize": 150,
    "numberOfBedrooms": 3,
    "numberOfBathrooms": 2,
    "property": {
    "id": "87654321-fedc-ba98-7654-321fedcba987",
    "listingTitle": "Modern 3BR House and Lot in Prime Location",
    "listingPrice": 5500000,
    "listingPriceFormatted": "₱5,500,000",
    "address": "Alabang, Muntinlupa",
    "cityName": "Muntinlupa",
    "barangayName": "Alabang",
    "longitude": 121.0458,
    "latitude": 14.4237,
    "propertyTypeName": "House and Lot",
    "listingTypeName": "Sale",
    "scrapeContactInfo": {
    "agentName": "Maria Santos",
    "agencyName": "Prime Realty",
    "extractedAt": "2025-06-01T10:00:00.000Z",
    "phoneNumber": "+639123456789"
    },
    "images": [
    {
    "id": "img123-4567-8901-2345-678901234567",
    "imageUrl": "https://images.example.com/house1/front.jpg"
    },
    {
    "id": "img234-5678-9012-3456-789012345678",
    "imageUrl": "https://images.example.com/house1/living.jpg"
    }
    ]
    },
    "isLiked": false
    }
    ],
    "meta": {
    "total": 50,
    "page": 1,
    "pageSize": 20,
    "totalPages": 3,
    "nextPage": 2,
    "prevPage": null
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new house and lot (legacy)",
    "description": "Create a new house and lot listing using the legacy endpoint",
    "deprecated": true,
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateHouseAndLotInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created house and lot",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateHouseAndLotResponse"
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots/drafts/{userId}": {
    "get": {
    "summary": "Get user's draft house and lots",
    "description": "Retrieve all draft house and lot listings for a specific user",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved draft house and lots",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots/user/{userId}": {
    "get": {
    "summary": "Get house and lots by user ID",
    "description": "Retrieve all house and lot listings for a specific user",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved house and lots",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots/complete": {
    "post": {
    "summary": "Create a complete house and lot",
    "description": "Create a new house and lot listing with complete data from multi-step form",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateHouseAndLotCompleteInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created house and lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots/draft": {
    "post": {
    "summary": "Save house and lot as draft",
    "description": "Save a house and lot listing as draft with partial data allowed",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/SaveHouseAndLotDraftInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully saved draft",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots/{id}/publish": {
    "post": {
    "summary": "Publish a house and lot",
    "description": "Convert a draft house and lot listing to published status",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The house and lot ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/PublishHouseAndLotInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully published house and lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error or missing required fields",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "House and lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/house-and-lots/{id}": {
    "get": {
    "summary": "Get house and lot by ID",
    "description": "Retrieve a specific house and lot listing by its ID",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The house and lot ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved house and lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    },
    "example": {
    "success": true,
    "data": {
    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "lotSize": 150,
    "floorArea": 120,
    "numberOfBedrooms": 3,
    "numberOfBathrooms": 2,
    "numberOfFloors": 2,
    "numberOfParkingSpaces": 2,
    "furnishingStatus": null,
    "numberOfGarages": 1,
    "numberOfLivingRooms": 1,
    "numberOfDiningRooms": 1,
    "numberOfKitchens": 1,
    "numberOfMaidRooms": null,
    "yearBuilt": 2020,
    "hasSwimmingPool": false,
    "hasGarden": true,
    "hasTerrace": true,
    "hasBalcony": false,
    "hasSecurity": true,
    "propertyId": "87654321-fedc-ba98-7654-321fedcba987",
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "property": {
    "id": "87654321-fedc-ba98-7654-321fedcba987",
    "userId": "user-123",
    "propertyTypeId": "prop-type-456",
    "listingTypeId": "list-type-789",
    "listingTitle": "Modern 3BR House and Lot in Prime Location",
    "listingDescription": "Beautiful modern house with garden and all amenities",
    "listingDescriptionMarkdown": "### Your Perfect Family Home\n\nBeautiful **modern house** with garden and all amenities.\n\n*Features:*\n• 3 bedrooms, 2 bathrooms\n• 120 sqm floor area on 150 sqm lot\n• Garden and terrace\n• 24/7 security\n• 2 parking spaces\n\nPerfect for families seeking comfort and security!",
    "listingPrice": 5500000,
    "listingPriceFormatted": "₱5,500,000",
    "cityId": "city-123",
    "barangayId": "brgy-456",
    "streetAddress": "123 Main Street",
    "address": "Alabang, Muntinlupa",
    "region": "Metro Manila",
    "longitude": 121.0509,
    "latitude": 14.4241,
    "isDraft": false,
    "isPublished": true,
    "scrapeId": null,
    "scrapeContactInfo": {
    "agentName": "Maria Santos",
    "agencyName": "Metro Realty",
    "extractedAt": "2025-06-01T09:00:00.000Z",
    "phoneNumber": "+639123456789"
    },
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "images": [
    {
    "id": "img-001",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    },
    {
    "id": "img-002",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/b2345d/720x540c.jpg"
    },
    {
    "id": "img-003",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/c4567e/720x540c.jpg"
    }
    ]
    },
    "isLiked": false
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "House and lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "summary": "Update a house and lot",
    "description": "Update an existing house and lot listing",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The house and lot ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateHouseAndLotInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated house and lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/HouseAndLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "House and lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a house and lot",
    "description": "Delete a house and lot listing and its associated property",
    "tags": [
    "House and Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The house and lot ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted house and lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "House and lot listing deleted successfully"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "House and lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers": {
    "get": {
    "summary": "List all job schedulers",
    "description": "Retrieves a list of all configured job schedulers including their patterns,\nintervals, and next execution times.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "List of job schedulers retrieved successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/JobSchedulersListResponse"
    },
    "example": {
    "success": true,
    "data": [
    {
    "id": "hourly-warehouse-processing",
    "pattern": "0 * * * *",
    "every": null,
    "tz": "Asia/Manila",
    "next": 1673888400000
    },
    {
    "id": "half-hourly-warehouse-processing",
    "pattern": null,
    "every": 1800000,
    "tz": null,
    "next": 1673886600000
    },
    {
    "id": "daily-scrape-cleanup",
    "pattern": "0 3 * * *",
    "every": null,
    "tz": "Asia/Manila",
    "next": 1673902800000
    }
    ]
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/debug-env": {
    "get": {
    "summary": "Debug environment configuration (TEMPORARY)",
    "description": "Shows current environment values and IDs being used",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Environment configuration",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/setup": {
    "post": {
    "summary": "Set up all job schedulers",
    "description": "Initializes all configured job schedulers. This includes:\n- Hourly warehouse processing\n- Half-hourly warehouse processing\n- Hourly condominium processing\n- Half-hourly condominium processing\n- Hourly house and lot processing\n- Half-hourly house and lot processing\n- Hourly vacant lot processing\n- Half-hourly vacant lot processing\n- Daily scrape cleanup (3 AM)\n- Daily invalid records cleanup (2 AM)\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job schedulers set up successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Job schedulers set up successfully"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Failed to set up job schedulers",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/remove-all": {
    "delete": {
    "summary": "Remove all job schedulers",
    "description": "Removes all configured job schedulers. This will stop all scheduled executions.",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job schedulers removed successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "All job schedulers removed"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Failed to remove job schedulers",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/pause": {
    "post": {
    "summary": "Pause a job scheduler",
    "description": "Pauses a specific job scheduler by ID. The scheduler remains configured but won't execute.",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "schedulerId"
    ],
    "properties": {
    "schedulerId": {
    "type": "string",
    "description": "ID of the scheduler to pause",
    "example": "hourly-warehouse-processing"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Job scheduler paused successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Scheduler paused successfully"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Invalid request body",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Scheduler not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Failed to pause scheduler",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/resume": {
    "post": {
    "summary": "Resume a job scheduler",
    "description": "Resumes a paused job scheduler by recreating it with its original configuration.\nNote: This requires the scheduler to be part of the predefined schedulers.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "schedulerId"
    ],
    "properties": {
    "schedulerId": {
    "type": "string",
    "description": "ID of the scheduler to resume",
    "example": "hourly-warehouse-processing"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Job scheduler resumed successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Scheduler resumed successfully"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Invalid request body or unknown scheduler",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Failed to resume scheduler",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/warehouse-processing": {
    "post": {
    "summary": "Manually trigger warehouse processing",
    "description": "Manually triggers the warehouse processing job to run immediately.\nThis will process unprocessed warehouse records from the scrape table.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 25 warehouses"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No unprocessed warehouses found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No unprocessed warehouses found"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/condominium-processing": {
    "post": {
    "summary": "Manually trigger condominium processing",
    "description": "Manually triggers the condominium processing job to run immediately.\nThis will process unprocessed condominium records from the scrape table.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 15 condominiums"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No unprocessed condominiums found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No unprocessed condominiums found"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/house-and-lot-processing": {
    "post": {
    "summary": "Manually trigger house and lot processing",
    "description": "Manually triggers the house and lot processing job to run immediately.\nThis will process unprocessed house and lot records from the scrape table.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 20 house and lots"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No unprocessed house and lots found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No unprocessed house and lots found"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/vacant-lot-processing": {
    "post": {
    "summary": "Manually trigger vacant lot processing",
    "description": "Manually triggers the vacant lot processing job to run immediately.\nThis will process unprocessed vacant lot/land records from the scrape table.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 15 vacant lots"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No unprocessed vacant lots found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No unprocessed vacant lots found"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/cleanup-invalid-records": {
    "post": {
    "summary": "Manually trigger invalid records cleanup",
    "description": "Manually triggers the cleanup job to remove invalid scrape records\nsuch as GTM dataLayer objects and analytics tracking data.\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Cleanup job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "cleanup-12345",
    "message": "Cleanup job triggered successfully"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger cleanup job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/warehouse-processing-aggressive": {
    "post": {
    "summary": "Aggressively search and process potential warehouse records",
    "description": "Performs an aggressive search for warehouse records by looking in:\n- Property type field (case-insensitive)\n- Data content for warehouse-related keywords\n- Records with warehouse-specific fields\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 25 warehouses"
    }
    }
    }
    }
    },
    "404": {
    "description": "No potential warehouses found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No potential warehouses found with aggressive search"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/condominium-processing-aggressive": {
    "post": {
    "summary": "Aggressively search and process potential condominium records",
    "description": "Performs an aggressive search for condominium records by looking in:\n- Property type field for 'condominium' or 'condo' (case-insensitive)\n- Data content for condominium-related keywords (residential unit, tower, residences)\n- Records with condominium-specific fields (floor_area, bedrooms, bathrooms, amenities)\n- Excludes records that appear to be warehouses or houses\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 25 potential condominiums"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No potential condominiums found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No potential condominiums found with aggressive search"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/house-and-lot-processing-aggressive": {
    "post": {
    "summary": "Aggressively search and process potential house and lot records",
    "description": "Performs an aggressive search for house and lot records by looking in:\n- Property type field for 'house', 'single-family', or similar (case-insensitive)\n- Data content for house-related keywords (bungalow, townhouse, single detached)\n- Records with house-specific fields (land_size, lot_size, garage, garden)\n- Excludes records that appear to be condominiums or warehouses\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 30 potential house and lots"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No potential house and lots found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No potential house and lots found with aggressive search"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/trigger/vacant-lot-processing-aggressive": {
    "post": {
    "summary": "Aggressively search and process potential vacant lot records",
    "description": "Performs an aggressive search for vacant lot records by looking in:\n- Property type field for 'land', 'lot', or 'vacant' (case-insensitive)\n- Data content for vacant lot-related keywords (vacant lot, lot for sale, commercial lot, etc.)\n- Records with lot-specific fields (land_size, lot_size, lot_area, sqm, zoning)\n- Excludes records that appear to be condominiums, warehouses, or houses\n",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Job triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ManualJobTriggerResponse"
    },
    "example": {
    "success": true,
    "data": {
    "jobId": "manual-12345",
    "message": "Processing 20 potential vacant lots"
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "No potential vacant lots found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "No potential vacant lots found with aggressive search"
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Failed to trigger job",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/diagnostic": {
    "post": {
    "summary": "Run diagnostic check on scrape records",
    "description": "Checks scrape table for unprocessed records and their structure",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Diagnostic check completed",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Diagnostic check completed"
    },
    "data": {
    "type": "object",
    "properties": {
    "result": {
    "type": "object",
    "description": "Diagnostic results"
    }
    }
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/diagnostic-data": {
    "get": {
    "summary": "Get diagnostic data about scrape records",
    "description": "Returns diagnostic information about unprocessed scrape records including counts by property type and sample data",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Diagnostic data retrieved successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "summary": {
    "type": "object",
    "properties": {
    "totalUnprocessedByType": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "propertyType": {
    "type": "string"
    },
    "count": {
    "type": "number"
    }
    }
    }
    },
    "warehouseRecordsFound": {
    "type": "number"
    }
    }
    },
    "samples": {
    "type": "object",
    "properties": {
    "warehouses": {
    "type": "array"
    },
    "anyType": {
    "type": "array"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/job-schedulers/{id}": {
    "get": {
    "summary": "Get a specific job scheduler",
    "description": "Retrieves details about a specific job scheduler by its ID",
    "tags": [
    "Job Schedulers"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string"
    },
    "description": "The scheduler ID",
    "example": "hourly-warehouse-processing"
    }
    ],
    "responses": {
    "200": {
    "description": "Job scheduler retrieved successfully",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/JobSchedulerResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Job scheduler not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/amenities": {
    "get": {
    "summary": "Get all amenities",
    "description": "Retrieve a paginated list of all amenities with optional search functionality",
    "tags": [
    "Amenities"
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number for pagination"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Number of items per page"
    },
    {
    "name": "search",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Optional search term to filter amenities"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved amenities",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/AmenitiesListResponse"
    }
    }
    }
    },
    "400": {
    "description": "Invalid query parameters",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new amenity",
    "description": "Create a new amenity with name and optional description",
    "tags": [
    "Amenities"
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateAmenityInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created amenity",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/AmenityResponse"
    }
    }
    }
    },
    "400": {
    "description": "Invalid input data",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Amenity with same name already exists",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/amenities/{id}": {
    "get": {
    "summary": "Get amenity by ID",
    "description": "Retrieve a specific amenity by its unique identifier",
    "tags": [
    "Amenities"
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Unique identifier of the amenity"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved amenity",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/AmenityResponse"
    }
    }
    }
    },
    "404": {
    "description": "Amenity not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "summary": "Update an amenity",
    "description": "Update an existing amenity by its ID with partial data",
    "tags": [
    "Amenities"
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Unique identifier of the amenity to update"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateAmenityInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated amenity",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/AmenityResponse"
    }
    }
    }
    },
    "400": {
    "description": "Invalid input data",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Amenity not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Amenity with same name already exists",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete an amenity",
    "description": "Delete an existing amenity by its ID",
    "tags": [
    "Amenities"
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Unique identifier of the amenity to delete"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted amenity",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/AmenityResponse"
    }
    }
    }
    },
    "404": {
    "description": "Amenity not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/features": {
    "get": {
    "summary": "Get all features",
    "description": "Retrieve a paginated list of all features with optional search functionality",
    "tags": [
    "Features"
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number for pagination"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Number of items per page"
    },
    {
    "name": "search",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Optional search term to filter features"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved features",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/FeaturesListResponse"
    }
    }
    }
    },
    "400": {
    "description": "Invalid query parameters",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new feature",
    "description": "Create a new feature with name and optional description",
    "tags": [
    "Features"
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateFeatureInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created feature",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/FeatureResponse"
    }
    }
    }
    },
    "400": {
    "description": "Invalid input data",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Feature with same name already exists",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/features/{id}": {
    "get": {
    "summary": "Get feature by ID",
    "description": "Retrieve a specific feature by its unique identifier",
    "tags": [
    "Features"
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Unique identifier of the feature"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved feature",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/FeatureResponse"
    }
    }
    }
    },
    "404": {
    "description": "Feature not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "summary": "Update a feature",
    "description": "Update an existing feature by its ID with partial data",
    "tags": [
    "Features"
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Unique identifier of the feature to update"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateFeatureInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated feature",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/FeatureResponse"
    }
    }
    }
    },
    "400": {
    "description": "Invalid input data",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Feature not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Feature with same name already exists",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a feature",
    "description": "Delete an existing feature by its ID",
    "tags": [
    "Features"
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Unique identifier of the feature to delete"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted feature",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/FeatureResponse"
    }
    }
    }
    },
    "404": {
    "description": "Feature not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/psgc/city": {
    "get": {
    "tags": [
    "City"
    ],
    "summary": "List all cities",
    "description": "Retrieve a paginated list of cities with optional search filtering",
    "parameters": [
    {
    "in": "query",
    "name": "page",
    "schema": {
    "type": "integer",
    "default": 1
    },
    "description": "Page number"
    },
    {
    "in": "query",
    "name": "pageSize",
    "schema": {
    "type": "integer",
    "default": 10
    },
    "description": "Number of items per page"
    },
    {
    "in": "query",
    "name": "search",
    "schema": {
    "type": "string"
    },
    "description": "Search term for filtering cities"
    }
    ],
    "responses": {
    "200": {
    "description": "Successful response",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/City"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Bad request",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "tags": [
    "City"
    ],
    "summary": "Create a new city",
    "description": "Create a new city record in the PSGC database",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CityInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "City created successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/City"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Bad request - validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/psgc/city/{id}": {
    "get": {
    "tags": [
    "City"
    ],
    "summary": "Get city by ID",
    "description": "Retrieve a single city by its ID",
    "parameters": [
    {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "City ID"
    }
    ],
    "responses": {
    "200": {
    "description": "City found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/City"
    }
    }
    }
    }
    }
    },
    "404": {
    "description": "City not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "tags": [
    "City"
    ],
    "summary": "Update city",
    "description": "Update an existing city record",
    "parameters": [
    {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "City ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CityInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "City updated successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "number",
    "description": "Number of rows affected"
    }
    }
    }
    }
    }
    },
    "404": {
    "description": "City not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "tags": [
    "City"
    ],
    "summary": "Delete city",
    "description": "Delete a city record from the database",
    "parameters": [
    {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "City ID"
    }
    ],
    "responses": {
    "200": {
    "description": "City deleted successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "number",
    "description": "Number of rows affected"
    }
    }
    }
    }
    }
    },
    "404": {
    "description": "City not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/psgc/barangay": {
    "get": {
    "tags": [
    "Barangay"
    ],
    "summary": "List all barangays",
    "description": "Retrieve a paginated list of barangays with optional search and city filtering",
    "parameters": [
    {
    "in": "query",
    "name": "page",
    "schema": {
    "type": "integer",
    "default": 1
    },
    "description": "Page number"
    },
    {
    "in": "query",
    "name": "pageSize",
    "schema": {
    "type": "integer",
    "default": 10
    },
    "description": "Number of items per page"
    },
    {
    "in": "query",
    "name": "search",
    "schema": {
    "type": "string"
    },
    "description": "Search term for filtering barangays"
    },
    {
    "in": "query",
    "name": "cityPsgcCode",
    "schema": {
    "type": "string"
    },
    "description": "Filter by city PSGC code"
    }
    ],
    "responses": {
    "200": {
    "description": "Successful response",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Barangay"
    }
    },
    "meta": {
    "$ref": "#/components/schemas/PaginationMeta"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Bad request",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "tags": [
    "Barangay"
    ],
    "summary": "Create a new barangay",
    "description": "Create a new barangay record in the PSGC database",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/BarangayInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Barangay created successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Barangay"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Bad request - validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/psgc/barangay/{id}": {
    "get": {
    "tags": [
    "Barangay"
    ],
    "summary": "Get barangay by ID",
    "description": "Retrieve a single barangay by its ID",
    "parameters": [
    {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Barangay ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Barangay found",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Barangay"
    }
    }
    }
    }
    }
    },
    "404": {
    "description": "Barangay not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "tags": [
    "Barangay"
    ],
    "summary": "Update barangay",
    "description": "Update an existing barangay record",
    "parameters": [
    {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Barangay ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/BarangayInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Barangay updated successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "number",
    "description": "Number of rows affected"
    }
    }
    }
    }
    }
    },
    "404": {
    "description": "Barangay not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "tags": [
    "Barangay"
    ],
    "summary": "Delete barangay",
    "description": "Delete a barangay record from the database",
    "parameters": [
    {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Barangay ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Barangay deleted successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "number",
    "description": "Number of rows affected"
    }
    }
    }
    }
    }
    },
    "404": {
    "description": "Barangay not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/listing-types": {
    "get": {
    "summary": "Get all listing types",
    "description": "Retrieve a list of all active listing types sorted by name",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved listing types",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ListingTypesListResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new listing type",
    "description": "Create a new listing type with the provided name",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateListingTypeInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created listing type",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateListingTypeResponse"
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Duplicate listing type",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/listing-types/{id}": {
    "put": {
    "summary": "Update a listing type",
    "description": "Update an existing listing type with the provided data",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The listing type ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateListingTypeInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated listing type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Listing type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a listing type",
    "description": "Permanently delete a listing type by ID",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The listing type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted listing type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Listing type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "get": {
    "summary": "Get a listing type by ID",
    "description": "Retrieve a specific listing type by its ID",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The listing type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved listing type",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ListingTypeResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Listing type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/listing-types/{id}/disable": {
    "patch": {
    "summary": "Disable a listing type",
    "description": "Disable a listing type without deleting it",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The listing type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully disabled listing type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Listing type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/listing-types/{id}/enable": {
    "patch": {
    "summary": "Enable a listing type",
    "description": "Enable a previously disabled listing type",
    "tags": [
    "Listing Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The listing type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully enabled listing type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Listing type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/phil-valuate-ai": {
    "post": {
    "summary": "Get AI-powered property valuation",
    "description": "Provides comprehensive property valuation using AI analysis of market data and comparables.\n\n**Note:** For production use, we recommend using the `/v1/bullmq/enqueue-job` endpoint instead,\nwhich provides asynchronous processing with job tracking. This endpoint may timeout for\ncomplex valuations or high load scenarios.\n\nThe service analyzes:\n- Recent sales and rental comparables in the area\n- Market trends and pricing patterns\n- Property features and amenities impact on value\n- Location-specific factors affecting valuation\n\nReturns detailed valuation ranges for both sales and rentals, along with supporting data\nincluding comparable properties, market trends, and key investment metrics.\n",
    "tags": [
    "PhilValuate AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/WebResearchAiInput"
    },
    "examples": {
    "condoValuation": {
    "summary": "Condominium valuation",
    "value": {
    "query": {
    "propertyType": "Condominium",
    "propertySize": 65,
    "buildingName": "Greenbelt Madison",
    "propertyAddress": "Legaspi Street, Makati City",
    "propertyFeatures": [
    "2BR",
    "2BA",
    "Balcony"
    ],
    "propertyAmenities": [
    "Swimming Pool",
    "Gym",
    "24/7 Security"
    ],
    "propertyDescription": "High floor unit with city view",
    "extraMetadata": {
    "floorLevel": 25,
    "facing": "North",
    "yearRenovated": 2022
    }
    },
    "searchContextSize": "medium",
    "userLocation": {
    "city": "Makati City",
    "region": "NCR"
    }
    }
    },
    "houseValuation": {
    "summary": "House and lot valuation",
    "value": {
    "query": {
    "propertyType": "House and Lot",
    "propertySize": 250,
    "propertyAddress": "BF Homes, Parañaque City",
    "propertyFeatures": [
    "4BR",
    "3BA",
    "2 Car Garage"
    ],
    "propertyAmenities": [
    "Garden",
    "Maid's Room"
    ],
    "propertyDescription": "Corner lot single detached house",
    "extraMetadata": {
    "lotArea": 300,
    "houseAge": 5,
    "subdivision": "BF Homes",
    "gatedCommunity": true
    }
    },
    "searchContextSize": "high",
    "userLocation": {
    "city": "Parañaque City",
    "region": "NCR"
    }
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Valuation completed successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/PhilValuateAiOutput"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Invalid input data",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    },
    "examples": {
    "invalidSize": {
    "summary": "Property size too small",
    "value": {
    "success": false,
    "error": {
    "code": "VALIDATION_ERROR",
    "message": "Property size is required",
    "details": {
    "query.propertySize": "Number must be greater than or equal to 20"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "AI service error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-ai/generate-title": {
    "post": {
    "summary": "Generate SEO-optimized property title",
    "description": "Generate an SEO-optimized title for a property listing based on property details.\nThe generated title is tailored to the specific property type and includes relevant details\nto improve search visibility and user engagement.\n\n**Property Type Specific Fields:**\n\n**Condominium:**\n- Use `buildingName` for the condo building name\n- Use `floorArea` for unit size in sqm\n- Include `floorNumber` for unit floor level\n- Include `bedrooms` and `bathrooms` count\n- Include `furnishingStatus` if fully/semi-furnished\n\n**House and Lot:**\n- Use `lotSize` for land area in sqm\n- Use `floorArea` for house floor area\n- Include `numberOfFloors` for multi-storey houses\n- Include `hasSwimmingPool`, `hasGarden` for special features\n\n**Warehouse:**\n- Use `buildingSize` for warehouse area\n- Include `ceilingHeight` in meters\n- Include `loadingDocks` count\n\n**Vacant Lot:**\n- Use `lotSize` for land area in sqm\n- Location is especially important for lots\n",
    "tags": [
    "Property AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "propertyType",
    "listingType",
    "location"
    ],
    "properties": {
    "propertyType": {
    "type": "string",
    "enum": [
    "Condominium",
    "House and Lot",
    "Warehouse",
    "Vacant Lot"
    ],
    "description": "Type of property"
    },
    "listingType": {
    "type": "string",
    "enum": [
    "For Sale",
    "For Rent"
    ],
    "description": "Whether the property is for sale or rent"
    },
    "propertySize": {
    "type": "number",
    "description": "General size in sqm (used if specific size fields not provided)"
    },
    "location": {
    "type": "object",
    "required": true,
    "properties": {
    "streetAddress": {
    "type": "string"
    },
    "barangay": {
    "type": "string"
    },
    "city": {
    "type": "string"
    },
    "region": {
    "type": "string"
    }
    }
    },
    "buildingName": {
    "type": "string",
    "description": "Name of the building (for condominiums)"
    },
    "floorNumber": {
    "type": "number",
    "description": "Floor number (for condominiums)"
    },
    "floorArea": {
    "type": "number",
    "description": "Floor area in sqm (for condos/houses)"
    },
    "bedrooms": {
    "type": "number",
    "description": "Number of bedrooms (for residential)"
    },
    "bathrooms": {
    "type": "number",
    "description": "Number of bathrooms (for residential)"
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ],
    "description": "Furnishing status (for condos/houses)"
    },
    "lotSize": {
    "type": "number",
    "description": "Lot size in sqm (for houses/warehouses/vacant lots)"
    },
    "numberOfFloors": {
    "type": "number",
    "description": "Number of floors (for houses)"
    },
    "hasGarden": {
    "type": "boolean",
    "description": "Has garden (for houses)"
    },
    "hasSwimmingPool": {
    "type": "boolean",
    "description": "Has swimming pool (for houses)"
    },
    "buildingSize": {
    "type": "number",
    "description": "Building size in sqm (for warehouses)"
    },
    "ceilingHeight": {
    "type": "number",
    "description": "Ceiling height in meters (for warehouses)"
    },
    "loadingDocks": {
    "type": "number",
    "description": "Number of loading docks (for warehouses)"
    },
    "features": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Additional property features"
    },
    "amenities": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Available amenities"
    },
    "parkingSpaces": {
    "type": "number",
    "description": "Number of parking spaces"
    }
    }
    },
    "examples": {
    "condominium": {
    "value": {
    "propertyType": "Condominium",
    "listingType": "For Sale",
    "buildingName": "Avida Towers Turf BGC",
    "floorArea": 60,
    "floorNumber": 25,
    "bedrooms": 2,
    "bathrooms": 1,
    "furnishingStatus": "fully_furnished",
    "location": {
    "barangay": "Fort Bonifacio",
    "city": "Taguig",
    "region": "Metro Manila"
    }
    }
    },
    "house": {
    "value": {
    "propertyType": "House and Lot",
    "listingType": "For Rent",
    "lotSize": 300,
    "floorArea": 250,
    "bedrooms": 4,
    "bathrooms": 3,
    "numberOfFloors": 2,
    "hasSwimmingPool": true,
    "location": {
    "barangay": "BF Homes",
    "city": "Parañaque",
    "region": "Metro Manila"
    }
    }
    },
    "warehouse": {
    "value": {
    "propertyType": "Warehouse",
    "listingType": "For Rent",
    "buildingSize": 2000,
    "ceilingHeight": 8,
    "loadingDocks": 4,
    "location": {
    "city": "Marikina",
    "region": "Metro Manila"
    }
    }
    },
    "vacantLot": {
    "value": {
    "propertyType": "Vacant Lot",
    "listingType": "For Sale",
    "lotSize": 500,
    "location": {
    "barangay": "Tagaytay Highlands",
    "city": "Tagaytay",
    "region": "Cavite"
    }
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully generated property title",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "object",
    "properties": {
    "title": {
    "type": "string",
    "description": "SEO-optimized property title (60-80 characters)"
    }
    }
    }
    }
    },
    "examples": {
    "condominium": {
    "value": {
    "success": true,
    "data": {
    "title": "2BR 60sqm Fully Furnished Condo For Sale in Avida Towers BGC, Taguig"
    }
    }
    },
    "house": {
    "value": {
    "success": true,
    "data": {
    "title": "Modern 4BR House with Pool For Rent in BF Homes, Parañaque"
    }
    }
    },
    "warehouse": {
    "value": {
    "success": true,
    "data": {
    "title": "Prime 2000sqm Warehouse with 4 Loading Docks For Lease in Marikina"
    }
    }
    },
    "vacantLot": {
    "value": {
    "success": true,
    "data": {
    "title": "500sqm Residential Lot For Sale in Tagaytay Highlands"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-ai/enhance-description": {
    "post": {
    "summary": "Generate AI suggestions for property description",
    "description": "Get AI-powered suggestions to enhance a property description based on user input.\nThe AI generates 3 different versions, each with a different focus, tailored to the\nspecific property type and target market.\n\nEach suggestion includes both a plain text version and a markdown-formatted version\nfor flexible display options.\n\n**Property Type Specific Focus:**\n\n**Condominium:**\n- Emphasizes lifestyle, convenience, and building amenities\n- Highlights proximity to business districts and urban conveniences\n- Targets young professionals, families, or investors\n\n**House and Lot:**\n- Emphasizes space, privacy, and family living\n- Details room configurations and outdoor features\n- Targets families or multi-generational households\n\n**Warehouse:**\n- Focuses on specifications and logistics advantages\n- Emphasizes accessibility and functionality\n- Targets businesses and logistics companies\n\n**Vacant Lot:**\n- Emphasizes development potential and location advantages\n- Mentions zoning and possible uses\n- Targets developers, investors, or end-users planning to build\n",
    "tags": [
    "Property AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "userInput",
    "propertyType",
    "listingType"
    ],
    "properties": {
    "userInput": {
    "type": "string",
    "description": "User's initial property description",
    "minLength": 1
    },
    "propertyType": {
    "type": "string",
    "enum": [
    "Condominium",
    "House and Lot",
    "Warehouse",
    "Vacant Lot"
    ]
    },
    "listingType": {
    "type": "string",
    "enum": [
    "For Sale",
    "For Rent"
    ]
    },
    "propertyDetails": {
    "type": "object",
    "description": "Additional property details to enrich the description",
    "properties": {
    "size": {
    "type": "number",
    "description": "General property size in sqm"
    },
    "location": {
    "type": "string",
    "description": "Property location"
    },
    "price": {
    "type": "number",
    "description": "Property price"
    },
    "parkingSpaces": {
    "type": "number"
    },
    "features": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "amenities": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "buildingName": {
    "type": "string",
    "description": "Building name (condos)"
    },
    "floorNumber": {
    "type": "number",
    "description": "Floor number (condos)"
    },
    "floorArea": {
    "type": "number",
    "description": "Floor area in sqm (condos/houses)"
    },
    "bedrooms": {
    "type": "number"
    },
    "bathrooms": {
    "type": "number"
    },
    "furnishingStatus": {
    "type": "string",
    "enum": [
    "fully_furnished",
    "semi_furnished",
    "unfurnished"
    ]
    },
    "lotSize": {
    "type": "number",
    "description": "Lot size in sqm (houses/warehouses/lots)"
    },
    "numberOfFloors": {
    "type": "number",
    "description": "Number of floors (houses)"
    },
    "garages": {
    "type": "number"
    },
    "yearBuilt": {
    "type": "number"
    },
    "hasSwimmingPool": {
    "type": "boolean"
    },
    "hasGarden": {
    "type": "boolean"
    },
    "hasTerrace": {
    "type": "boolean"
    },
    "hasBalcony": {
    "type": "boolean"
    },
    "hasSecurity": {
    "type": "boolean"
    },
    "buildingSize": {
    "type": "number",
    "description": "Building size in sqm (warehouses)"
    },
    "ceilingHeight": {
    "type": "number",
    "description": "Ceiling height in meters (warehouses)"
    },
    "loadingDocks": {
    "type": "number"
    },
    "hasLoadingBay": {
    "type": "boolean"
    },
    "hasFireSprinklers": {
    "type": "boolean"
    },
    "hasSecuritySystem": {
    "type": "boolean"
    },
    "securityFeatures": {
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "nearbyLocations": {
    "type": "array",
    "items": {
    "type": "string"
    },
    "description": "Nearby landmarks (lots)"
    },
    "zoning": {
    "type": "string",
    "description": "Zoning classification (lots)"
    },
    "terrain": {
    "type": "string",
    "description": "Terrain type (lots)"
    }
    }
    }
    }
    },
    "examples": {
    "condominium": {
    "value": {
    "userInput": "Nice condo with great view near BGC",
    "propertyType": "Condominium",
    "listingType": "For Sale",
    "propertyDetails": {
    "buildingName": "Avida Towers Turf BGC",
    "floorArea": 60,
    "floorNumber": 25,
    "bedrooms": 2,
    "bathrooms": 1,
    "furnishingStatus": "fully_furnished",
    "location": "Fort Bonifacio, Taguig",
    "price": 8500000,
    "amenities": [
    "Swimming Pool",
    "Gym",
    "24/7 Security"
    ]
    }
    }
    },
    "house": {
    "value": {
    "userInput": "Spacious family home in a quiet neighborhood",
    "propertyType": "House and Lot",
    "listingType": "For Sale",
    "propertyDetails": {
    "lotSize": 300,
    "floorArea": 250,
    "bedrooms": 4,
    "bathrooms": 3,
    "numberOfFloors": 2,
    "hasSwimmingPool": true,
    "hasGarden": true,
    "location": "BF Homes, Parañaque",
    "price": 15000000
    }
    }
    },
    "warehouse": {
    "value": {
    "userInput": "Large warehouse perfect for logistics",
    "propertyType": "Warehouse",
    "listingType": "For Rent",
    "propertyDetails": {
    "buildingSize": 2000,
    "ceilingHeight": 8,
    "loadingDocks": 4,
    "hasLoadingBay": true,
    "hasFireSprinklers": true,
    "location": "Marikina Industrial Zone",
    "price": 400000
    }
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully generated description suggestions",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean"
    },
    "data": {
    "type": "object",
    "properties": {
    "suggestions": {
    "type": "array",
    "description": "Array of 3 enhanced description suggestions",
    "items": {
    "type": "object",
    "properties": {
    "text": {
    "type": "string",
    "description": "Plain text version of the enhanced property description (150-300 words)"
    },
    "markdown": {
    "type": "string",
    "description": "Markdown-formatted version with bold, italics, bullets, and proper formatting"
    },
    "focus": {
    "type": "string",
    "description": "Brief description of what this version emphasizes (5-10 words)"
    }
    }
    }
    }
    }
    }
    }
    },
    "examples": {
    "response": {
    "value": {
    "success": true,
    "data": {
    "suggestions": [
    {
    "text": "Experience the epitome of urban living in this stunning 2-bedroom condominium at Avida Towers Turf BGC. This fully furnished 60sqm unit on the 25th floor offers breathtaking city views and modern comfort. The thoughtfully designed space features two bedrooms and one bathroom, perfect for young professionals or small families. Residents enjoy world-class amenities including a swimming pool, fully-equipped gym, and round-the-clock security. Located in the heart of Fort Bonifacio, you're just minutes away from top corporations, international schools, and premium shopping destinations. The building's strategic location provides easy access to BGC's vibrant dining scene and entertainment options. This property represents an excellent investment opportunity in one of Metro Manila's most sought-after addresses. Don't miss this chance to own a piece of BGC's dynamic lifestyle. Schedule your viewing today!",
    "markdown": "Experience the **epitome of urban living** in this stunning 2-bedroom condominium at **Avida Towers Turf BGC**. This *fully furnished* 60sqm unit on the **25th floor** offers breathtaking city views and modern comfort.\n\nThe thoughtfully designed space features:\n• Two spacious bedrooms\n• One modern bathroom\n• Fully furnished interiors\n• Spectacular city views\n\n### Building Amenities\n• Swimming pool\n• Fully-equipped gym\n• 24/7 security\n• Dedicated parking\n\nLocated in the **heart of Fort Bonifacio**, you're just minutes away from:\n• Top corporations and business centers\n• International schools\n• Premium shopping destinations\n• BGC's vibrant dining scene\n\nThis property represents an **excellent investment opportunity** in one of Metro Manila's most sought-after addresses. Don't miss this chance to own a piece of BGC's dynamic lifestyle.\n\n*Schedule your viewing today!*",
    "focus": "Lifestyle and investment potential"
    },
    {
    "text": "Discover modern convenience in this pristine 2-bedroom unit at Avida Towers Turf BGC. Spanning 60 square meters on the 25th floor, this fully furnished condominium combines functionality with style. The unit features two well-appointed bedrooms and a contemporary bathroom, ideal for professionals seeking comfort and convenience. Building amenities include a refreshing swimming pool, state-of-the-art fitness center, and 24-hour security for your peace of mind. Situated in Fort Bonifacio, Taguig's premier business district, this property offers unparalleled access to corporate offices, shopping centers, and entertainment venues. The strategic location ensures excellent connectivity to major thoroughfares and public transportation. With its competitive price point and high rental demand in the area, this unit presents a smart investment choice. Whether for personal use or rental income, this BGC property delivers exceptional value. Contact us today to arrange an exclusive viewing!",
    "markdown": "Discover **modern convenience** in this pristine 2-bedroom unit at **Avida Towers Turf BGC**. Spanning 60 square meters on the 25th floor, this *fully furnished* condominium combines functionality with style.\n\n### Unit Features\n• Two well-appointed bedrooms\n• Contemporary bathroom\n• Fully furnished interiors\n• High-floor location with views\n\n### Premium Amenities\n• Refreshing swimming pool\n• State-of-the-art fitness center\n• 24-hour security service\n• Covered parking space\n\nSituated in **Fort Bonifacio**, Taguig's premier business district, this property offers:\n• Unparalleled access to corporate offices\n• Premium shopping centers\n• Diverse entertainment venues\n• Excellent public transportation\n\nWith its **competitive price point** and high rental demand in the area, this unit presents a *smart investment choice*. Whether for personal use or rental income, this BGC property delivers exceptional value.\n\n**Contact us today to arrange an exclusive viewing!**",
    "focus": "Convenience and accessibility"
    },
    {
    "text": "Welcome to sophisticated city living at Avida Towers Turf BGC. This elegant 2-bedroom condominium on the 25th floor presents 60sqm of carefully curated living space. The fully furnished unit showcases contemporary design with two bedrooms and one bathroom, creating an ideal sanctuary above the bustling city. Residents benefit from exclusive access to premium facilities including a resort-style swimming pool, modern gymnasium, and comprehensive security systems. The Fort Bonifacio location places you at the center of Metro Manila's most dynamic district, surrounded by multinational companies, upscale retail establishments, and gourmet restaurants. The property's high-floor position ensures privacy and stunning views while maintaining easy access to ground-level conveniences. As BGC continues to appreciate in value, this unit offers strong capital growth potential alongside immediate rental opportunities. This is more than a property; it's your gateway to the BGC lifestyle. Inquire now to secure this exceptional opportunity!",
    "markdown": "Welcome to **sophisticated city living** at *Avida Towers Turf BGC*. This elegant 2-bedroom condominium on the **25th floor** presents 60sqm of carefully curated living space.\n\n### Elegant Living Space\nThe fully furnished unit showcases:\n• Contemporary design throughout\n• Two comfortable bedrooms\n• One modern bathroom\n• Premium furnishings included\n\n### **Exclusive Resident Facilities**\n• Resort-style swimming pool\n• Modern gymnasium\n• Comprehensive security systems\n• Private parking allocation\n\n### **Prime Fort Bonifacio Location**\nSurrounded by:\n• Multinational companies\n• Upscale retail establishments\n• Gourmet restaurants\n• International schools nearby\n\nThe property's **high-floor position** ensures:\n• Privacy and tranquility\n• Stunning city views\n• Natural light throughout the day\n• Easy access to ground-level conveniences\n\nAs BGC continues to appreciate in value, this unit offers **strong capital growth potential** alongside immediate rental opportunities.\n\n*This is more than a property; it's your gateway to the BGC lifestyle.*\n\n**Inquire now to secure this exceptional opportunity!**",
    "focus": "Luxury and capital appreciation"
    }
    ]
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-description-ai/update/{propertyId}": {
    "post": {
    "summary": "Update a single property description using AI",
    "description": "Generate and update the listing title and description for a property using AI based on scraped data",
    "tags": [
    "Property Description AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "propertyId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "ID of the property to update"
    }
    ],
    "responses": {
    "200": {
    "description": "Property description updated successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Property description updated successfully"
    }
    }
    }
    }
    }
    },
    "404": {
    "$ref": "#/components/responses/NotFound"
    },
    "500": {
    "$ref": "#/components/responses/InternalError"
    }
    }
    }
    },
    "/v1/property-description-ai/batch-update": {
    "post": {
    "summary": "Batch update property descriptions",
    "description": "Update multiple property descriptions using AI",
    "tags": [
    "Property Description AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": false,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "limit": {
    "type": "number",
    "minimum": 1,
    "maximum": 100,
    "default": 10,
    "description": "Number of properties to process"
    },
    "onlyMissing": {
    "type": "boolean",
    "default": true,
    "description": "Only process properties without descriptions"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Batch update completed",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "processed": {
    "type": "number",
    "example": 8
    },
    "failed": {
    "type": "number",
    "example": 2
    },
    "errors": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "propertyId": {
    "type": "string"
    },
    "error": {
    "type": "string"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "500": {
    "$ref": "#/components/responses/InternalError"
    }
    }
    }
    },
    "/v1/property-description-ai/properties-needing-descriptions": {
    "get": {
    "summary": "Get properties that need descriptions",
    "description": "Retrieve a list of properties that are missing descriptions",
    "tags": [
    "Property Description AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "limit",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 1,
    "maximum": 100,
    "default": 100
    },
    "description": "Maximum number of properties to return"
    },
    {
    "name": "excludeRecentlyUpdatedHours",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 0,
    "maximum": 168,
    "default": 24
    },
    "description": "Exclude properties updated in the last N hours (0 to disable)"
    }
    ],
    "responses": {
    "200": {
    "description": "List of properties needing descriptions",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "id": {
    "type": "string",
    "format": "uuid"
    },
    "listingTitle": {
    "type": "string",
    "nullable": true
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "500": {
    "$ref": "#/components/responses/InternalError"
    }
    }
    }
    },
    "/v1/property-description-ai/trigger-worker": {
    "post": {
    "summary": "Manually trigger the property description worker",
    "description": "Trigger the worker to process property descriptions (admin only)",
    "tags": [
    "Property Description AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": false,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "limit": {
    "type": "number",
    "minimum": 1,
    "maximum": 100,
    "description": "Number of properties to process"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Worker triggered successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Worker triggered successfully"
    },
    "data": {
    "type": "object",
    "properties": {
    "jobId": {
    "type": "string"
    },
    "jobName": {
    "type": "string"
    }
    }
    }
    }
    }
    }
    }
    },
    "403": {
    "description": "Forbidden - Feature not enabled"
    },
    "500": {
    "$ref": "#/components/responses/InternalError"
    }
    }
    }
    },
    "/v1/property-description-ai/history/{propertyId}": {
    "get": {
    "summary": "Get AI update history for a specific property",
    "description": "Retrieve the history of AI-generated updates for a property",
    "tags": [
    "Property Description AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "propertyId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "ID of the property"
    }
    ],
    "responses": {
    "200": {
    "description": "Property AI update history",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/PropertyAiUpdate"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-description-ai/stats": {
    "get": {
    "summary": "Get AI update statistics",
    "description": "Retrieve statistics about AI-generated property updates",
    "tags": [
    "Property Description AI"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "days",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 1,
    "maximum": 365,
    "default": 30
    },
    "description": "Number of days to include in statistics"
    }
    ],
    "responses": {
    "200": {
    "description": "AI update statistics",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "totalUpdates": {
    "type": "number"
    },
    "successfulUpdates": {
    "type": "number"
    },
    "failedUpdates": {
    "type": "number"
    },
    "averageProcessingTimeMs": {
    "type": "number"
    },
    "updatesByType": {
    "type": "object",
    "properties": {
    "title": {
    "type": "number"
    },
    "description": {
    "type": "number"
    },
    "both": {
    "type": "number"
    }
    }
    },
    "updatesBySource": {
    "type": "object",
    "properties": {
    "cron": {
    "type": "number"
    },
    "api": {
    "type": "number"
    },
    "manual": {
    "type": "number"
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-likes/{propertyId}": {
    "post": {
    "summary": "Like a property",
    "description": "Add a like to a property for the authenticated user",
    "tags": [
    "Property Likes"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "propertyId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "ID of the property to like"
    }
    ],
    "responses": {
    "200": {
    "description": "Property liked successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "alreadyLiked": {
    "type": "boolean",
    "description": "Whether the property was already liked"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Unlike a property",
    "description": "Remove a like from a property for the authenticated user",
    "tags": [
    "Property Likes"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "propertyId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "ID of the property to unlike"
    }
    ],
    "responses": {
    "200": {
    "description": "Property unliked successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "wasLiked": {
    "type": "boolean",
    "description": "Whether the property was liked before"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-likes/{propertyId}/status": {
    "get": {
    "summary": "Check like status",
    "description": "Check if the authenticated user has liked a property",
    "tags": [
    "Property Likes"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "propertyId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "ID of the property to check"
    }
    ],
    "responses": {
    "200": {
    "description": "Like status retrieved successfully",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "isLiked": {
    "type": "boolean",
    "description": "Whether the property is liked by the user"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-types": {
    "get": {
    "summary": "Get all property types",
    "description": "Retrieve a list of all active property types sorted by name",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved property types",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/PropertyTypesListResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new property type",
    "description": "Create a new property type with the provided name",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreatePropertyTypeInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created property type",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreatePropertyTypeResponse"
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Duplicate property type",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-types/{id}": {
    "put": {
    "summary": "Update a property type",
    "description": "Update an existing property type with the provided data",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The property type ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdatePropertyTypeInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated property type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Property type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a property type",
    "description": "Permanently delete a property type by ID",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The property type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted property type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Property type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "get": {
    "summary": "Get a property type by ID",
    "description": "Retrieve a specific property type by its ID",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The property type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved property type",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/PropertyTypeResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Property type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-types/{id}/disable": {
    "patch": {
    "summary": "Disable a property type",
    "description": "Disable a property type without deleting it",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The property type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully disabled property type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Property type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/property-types/{id}/enable": {
    "patch": {
    "summary": "Enable a property type",
    "description": "Enable a previously disabled property type",
    "tags": [
    "Property Types"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The property type ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully enabled property type",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Property type not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/urls": {
    "get": {
    "summary": "Get all URL records",
    "description": "Retrieve a paginated list of URL records with optional filters",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "isProcessed",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by processing status"
    },
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Items per page"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved URLs",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UrlListResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new URL",
    "description": "Create a new URL record for scraping",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateUrlInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created URL",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Url"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "409": {
    "description": "Duplicate URL",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/urls/stats": {
    "get": {
    "summary": "Get URL statistics",
    "description": "Retrieve statistics about URL processing status",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved statistics",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/UrlStats"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/urls/unprocessed": {
    "get": {
    "summary": "Get unprocessed URLs",
    "description": "Retrieve a limited list of unprocessed URLs with optional filters",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "limit",
    "in": "query",
    "schema": {
    "type": "string",
    "pattern": "^\\d+$",
    "default": "10"
    },
    "description": "Maximum number of records to return"
    },
    {
    "name": "listingType",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Filter by listing type"
    },
    {
    "name": "propertyType",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Filter by property type"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved unprocessed URLs",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Url"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/urls/{id}": {
    "get": {
    "summary": "Get a URL by ID",
    "description": "Retrieve a specific URL record by its ID",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The URL record ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved URL",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Url"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "URL not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "patch": {
    "summary": "Update a URL",
    "description": "Update an existing URL record",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The URL record ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateUrlInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated URL",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Url"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "URL not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a URL",
    "description": "Delete a URL record",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The URL record ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted URL",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "URL not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/urls/batch": {
    "post": {
    "summary": "Create multiple URLs",
    "description": "Create multiple URL records in a single request",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CreateUrlInput"
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created URLs",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Url"
    }
    },
    "meta": {
    "type": "object",
    "properties": {
    "created": {
    "type": "integer",
    "description": "Number of URLs created"
    }
    }
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/urls/{id}/process": {
    "post": {
    "summary": "Mark URL as processed",
    "description": "Mark a URL record as processed",
    "tags": [
    "Scrape URLs"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The URL record ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully marked as processed",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Url"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "URL not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/processing-summary": {
    "post": {
    "summary": "Create processing summary",
    "description": "Record a batch processing summary with successful and failed URLs",
    "tags": [
    "Processing Summary"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ProcessingSummaryInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created processing summary",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "message": {
    "type": "string",
    "example": "Processing summary recorded successfully"
    },
    "data": {
    "type": "object",
    "properties": {
    "summary_id": {
    "type": "string",
    "format": "uuid",
    "description": "ID of the created summary"
    }
    }
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape": {
    "get": {
    "summary": "Get all scrape records",
    "description": "Retrieve a paginated list of scrape records with optional filters",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "source",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Filter by source website"
    },
    {
    "name": "propertyType",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Filter by property type"
    },
    {
    "name": "listingType",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Filter by listing type"
    },
    {
    "name": "isProcessed",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by processing status"
    },
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Items per page"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved scrape records",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ScrapeListResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new scrape record",
    "description": "Create a new scrape record with scraped data",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateScrapeInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created scrape record",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Scrape"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/stats": {
    "get": {
    "summary": "Get scrape statistics",
    "description": "Retrieve statistics about scrape records grouped by various attributes",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved statistics",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/ScrapeStats"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/unprocessed": {
    "get": {
    "summary": "Get unprocessed scrape records",
    "description": "Retrieve a limited list of unprocessed scrape records",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "limit",
    "in": "query",
    "schema": {
    "type": "string",
    "pattern": "^\\d+$",
    "default": "10"
    },
    "description": "Maximum number of records to return"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved unprocessed records",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Scrape"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/{id}": {
    "get": {
    "summary": "Get a scrape record by ID",
    "description": "Retrieve a specific scrape record by its ID",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The scrape record ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved scrape record",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Scrape"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Scrape record not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "patch": {
    "summary": "Update a scrape record",
    "description": "Update an existing scrape record",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The scrape record ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateScrapeInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated scrape record",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Scrape"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Scrape record not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a scrape record",
    "description": "Delete a scrape record",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The scrape record ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted scrape record",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Scrape record not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/batch": {
    "post": {
    "summary": "Create multiple scrape records",
    "description": "Create multiple scrape records in a single request",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/CreateScrapeInput"
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created scrape records",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/Scrape"
    }
    },
    "meta": {
    "type": "object",
    "properties": {
    "created": {
    "type": "integer",
    "description": "Number of records created"
    }
    }
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/scrape/{id}/process": {
    "post": {
    "summary": "Mark scrape record as processed",
    "description": "Mark a scrape record as processed",
    "tags": [
    "Scrape"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The scrape record ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully marked as processed",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/Scrape"
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Scrape record not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots": {
    "get": {
    "summary": "Get all vacant lots",
    "description": "Retrieve a paginated list of vacant lot listings with optional filters",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Items per page"
    },
    {
    "name": "search",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Search term for title, description, or address"
    },
    {
    "name": "minPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum listing price"
    },
    {
    "name": "maxPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum listing price"
    },
    {
    "name": "minLotSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum lot size in square meters"
    },
    {
    "name": "maxLotSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum lot size in square meters"
    },
    {
    "name": "userId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by user ID"
    },
    {
    "name": "propertyTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by property type ID"
    },
    {
    "name": "listingTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by listing type ID"
    },
    {
    "name": "cityId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by city ID"
    },
    {
    "name": "barangayId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by barangay ID"
    },
    {
    "name": "isDraft",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by draft status"
    },
    {
    "name": "isPublished",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by published status"
    },
    {
    "name": "longitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Center longitude for location-based search"
    },
    {
    "name": "latitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Center latitude for location-based search"
    },
    {
    "name": "radius",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 0
    },
    "description": "Search radius in meters (defaults to 10km)"
    },
    {
    "name": "minLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Minimum longitude for bounding box search"
    },
    {
    "name": "maxLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Maximum longitude for bounding box search"
    },
    {
    "name": "minLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Minimum latitude for bounding box search"
    },
    {
    "name": "maxLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Maximum latitude for bounding box search"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved vacant lots",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/VacantLotListResponse"
    },
    "example": {
    "success": true,
    "data": [
    {
    "id": "lot123-4567-8901-2345-678901234567",
    "lotSize": 300,
    "property": {
    "id": "prop987-6543-2109-8765-432109876543",
    "listingTitle": "Prime 300 SQM Vacant Lot for Sale in Tagaytay",
    "listingPrice": 3000000,
    "listingPriceFormatted": "₱3,000,000",
    "address": "Tagaytay Highlands",
    "cityName": "Tagaytay",
    "barangayName": "Silang Junction North",
    "longitude": 120.9842,
    "latitude": 14.1153,
    "propertyTypeName": "Vacant Lot",
    "listingTypeName": "Sale",
    "scrapeContactInfo": {
    "agentName": "Juan Dela Cruz",
    "agencyName": "Tagaytay Realty",
    "extractedAt": "2025-06-01T11:30:00.000Z",
    "phoneNumber": "+639987654321"
    },
    "images": [
    {
    "id": "vl-img1-2345-6789-0123-456789012345",
    "imageUrl": "https://images.example.com/lot1/aerial.jpg"
    },
    {
    "id": "vl-img2-3456-7890-1234-567890123456",
    "imageUrl": "https://images.example.com/lot1/street-view.jpg"
    }
    ]
    },
    "isLiked": false
    }
    ],
    "meta": {
    "total": 25,
    "page": 1,
    "pageSize": 20,
    "totalPages": 2,
    "nextPage": 2,
    "prevPage": null
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new vacant lot (legacy)",
    "description": "Create a new vacant lot listing using the legacy endpoint",
    "deprecated": true,
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateVacantLotInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created vacant lot",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateVacantLotResponse"
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots/drafts/{userId}": {
    "get": {
    "summary": "Get user's draft vacant lots",
    "description": "Retrieve all draft vacant lot listings for a specific user",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved draft vacant lots",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots/user/{userId}": {
    "get": {
    "summary": "Get vacant lots by user ID",
    "description": "Retrieve all vacant lot listings for a specific user",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved vacant lots",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots/complete": {
    "post": {
    "summary": "Create a complete vacant lot",
    "description": "Create a new vacant lot listing with complete data from multi-step form",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateVacantLotCompleteInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created vacant lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots/draft": {
    "post": {
    "summary": "Save vacant lot as draft",
    "description": "Save a vacant lot listing as draft with partial data allowed",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/SaveVacantLotDraftInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully saved draft",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots/{id}/publish": {
    "post": {
    "summary": "Publish a vacant lot",
    "description": "Convert a draft vacant lot listing to published status",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The vacant lot ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/PublishVacantLotInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully published vacant lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error or missing required fields",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Vacant lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/vacant-lots/{id}": {
    "get": {
    "summary": "Get vacant lot by ID",
    "description": "Retrieve a specific vacant lot listing by its ID",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The vacant lot ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved vacant lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    },
    "example": {
    "success": true,
    "data": {
    "id": "lot123-4567-8901-2345-678901234567",
    "lotSize": 300,
    "numberOfParkingSpaces": null,
    "nearbyLocations": [],
    "propertyId": "prop987-6543-2109-8765-432109876543",
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "property": {
    "id": "prop987-6543-2109-8765-432109876543",
    "userId": "user-123",
    "propertyTypeId": "prop-type-456",
    "listingTypeId": "list-type-789",
    "listingTitle": "Prime 300 SQM Vacant Lot for Sale in Tagaytay",
    "listingDescription": "Perfect for building your dream home",
    "listingDescriptionMarkdown": "### Investment Opportunity in Tagaytay\n\n**300 SQM** of prime vacant lot perfect for building your dream home.\n\n*Location Advantages:*\n• Cool climate\n• Scenic views\n• Growing area\n• Easy access to amenities\n\nSecure your future today!",
    "listingPrice": 3000000,
    "listingPriceFormatted": "₱3,000,000",
    "cityId": "city-123",
    "barangayId": "brgy-456",
    "streetAddress": null,
    "address": "Tagaytay Highlands",
    "region": "CALABARZON",
    "longitude": 120.9842,
    "latitude": 14.1153,
    "isDraft": false,
    "isPublished": true,
    "scrapeId": null,
    "scrapeContactInfo": {
    "agentName": "Juan Cruz",
    "agencyName": "Highlands Realty",
    "extractedAt": "2025-06-01T08:00:00.000Z",
    "phoneNumber": "+639987654321"
    },
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "images": [
    {
    "id": "img-001",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    }
    ]
    },
    "isLiked": false
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Vacant lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "summary": "Update a vacant lot",
    "description": "Update an existing vacant lot listing",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The vacant lot ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateVacantLotInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated vacant lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/VacantLotWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Vacant lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a vacant lot",
    "description": "Delete a vacant lot listing and its associated property",
    "tags": [
    "Vacant Lots"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The vacant lot ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted vacant lot",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "Vacant lot listing deleted successfully"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Vacant lot not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses": {
    "get": {
    "summary": "Get all warehouses",
    "description": "Retrieve a paginated list of warehouse listings with optional filters",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "page",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "default": 1
    },
    "description": "Page number"
    },
    {
    "name": "pageSize",
    "in": "query",
    "schema": {
    "type": "integer",
    "minimum": 1,
    "maximum": 100,
    "default": 20
    },
    "description": "Items per page"
    },
    {
    "name": "search",
    "in": "query",
    "schema": {
    "type": "string"
    },
    "description": "Search term for title, description, or address"
    },
    {
    "name": "minBuildingSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum building size in square meters"
    },
    {
    "name": "maxBuildingSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum building size in square meters"
    },
    {
    "name": "minLotSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum lot size in square meters"
    },
    {
    "name": "maxLotSize",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum lot size in square meters"
    },
    {
    "name": "minFloorArea",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum floor area in square meters"
    },
    {
    "name": "maxFloorArea",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum floor area in square meters"
    },
    {
    "name": "minPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum listing price"
    },
    {
    "name": "maxPrice",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum listing price"
    },
    {
    "name": "minCeilingHeight",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Minimum ceiling height in meters"
    },
    {
    "name": "maxCeilingHeight",
    "in": "query",
    "schema": {
    "type": "number"
    },
    "description": "Maximum ceiling height in meters"
    },
    {
    "name": "minLoadingDocks",
    "in": "query",
    "schema": {
    "type": "integer"
    },
    "description": "Minimum number of loading docks"
    },
    {
    "name": "maxLoadingDocks",
    "in": "query",
    "schema": {
    "type": "integer"
    },
    "description": "Maximum number of loading docks"
    },
    {
    "name": "hasLoadingBay",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by loading bay availability"
    },
    {
    "name": "hasFireSprinklers",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by fire sprinklers availability"
    },
    {
    "name": "hasSecuritySystem",
    "in": "query",
    "schema": {
    "type": "string",
    "enum": [
    "true",
    "false"
    ]
    },
    "description": "Filter by security system availability"
    },
    {
    "name": "userId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by user ID"
    },
    {
    "name": "propertyTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by property type ID"
    },
    {
    "name": "listingTypeId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by listing type ID"
    },
    {
    "name": "cityId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by city ID"
    },
    {
    "name": "barangayId",
    "in": "query",
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "Filter by barangay ID"
    },
    {
    "name": "isDraft",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by draft status"
    },
    {
    "name": "isPublished",
    "in": "query",
    "schema": {
    "type": "boolean"
    },
    "description": "Filter by published status"
    },
    {
    "name": "longitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Center longitude for location-based search"
    },
    {
    "name": "latitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Center latitude for location-based search"
    },
    {
    "name": "radius",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": 0
    },
    "description": "Search radius in meters (defaults to 10km)"
    },
    {
    "name": "minLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Minimum longitude for bounding box search"
    },
    {
    "name": "maxLongitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -180,
    "maximum": 180
    },
    "description": "Maximum longitude for bounding box search"
    },
    {
    "name": "minLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Minimum latitude for bounding box search"
    },
    {
    "name": "maxLatitude",
    "in": "query",
    "schema": {
    "type": "number",
    "minimum": -90,
    "maximum": 90
    },
    "description": "Maximum latitude for bounding box search"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved warehouses",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/WarehouseListResponse"
    },
    "example": {
    "success": true,
    "data": [
    {
    "id": "3ad3088c-54ac-4fd9-8e3d-7de1c86fb536",
    "buildingSize": 1056,
    "lotSize": null,
    "floorArea": null,
    "ceilingHeight": null,
    "loadingDocks": null,
    "property": {
    "id": "ba170b8e-2282-47cc-9b8a-12b6e31931f0",
    "listingTitle": "Spacious 1056 SQM Warehouse for LEASE in Meycauayan | Perfect for Storage!!",
    "listingPrice": 180000,
    "listingPriceFormatted": "₱180,000",
    "address": "Camalig, Meycauayan",
    "cityName": "Meycauayan",
    "barangayName": "Camalig",
    "longitude": 120.9919328,
    "latitude": 14.7691031,
    "propertyTypeName": "Warehouse",
    "listingTypeName": "Rent",
    "scrapeContactInfo": {
    "agentName": "Meliza Zapata",
    "agencyName": "PRIME Philippines",
    "extractedAt": "2025-06-01T09:31:19.555Z",
    "phoneNumber": "+639688805399"
    },
    "images": [
    {
    "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    },
    {
    "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
    "imageUrl": "https://pic2.ajkimg.com/display/anjuke/b1234d/720x540c.jpg"
    }
    ]
    },
    "isLiked": false
    }
    ],
    "meta": {
    "total": 100,
    "page": 1,
    "pageSize": 20,
    "totalPages": 5,
    "nextPage": 2,
    "prevPage": null
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "post": {
    "summary": "Create a new warehouse (legacy)",
    "description": "Create a new warehouse listing using the legacy endpoint",
    "deprecated": true,
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateWarehouseInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully created warehouse",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateWarehouseResponse"
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses/drafts/{userId}": {
    "get": {
    "summary": "Get user's draft warehouses",
    "description": "Retrieve all draft warehouse listings for a specific user",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved draft warehouses",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses/user/{userId}": {
    "get": {
    "summary": "Get warehouses by user ID",
    "description": "Retrieve all warehouse listings for a specific user",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The user ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved warehouses",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "array",
    "items": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "User not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses/complete": {
    "post": {
    "summary": "Create a complete warehouse",
    "description": "Create a new warehouse listing with complete data from multi-step form",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/CreateWarehouseCompleteInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully created warehouse",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses/draft": {
    "post": {
    "summary": "Save warehouse as draft",
    "description": "Save a warehouse listing as draft with partial data allowed",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/SaveWarehouseDraftInput"
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully saved draft",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses/{id}/publish": {
    "post": {
    "summary": "Publish a warehouse",
    "description": "Convert a draft warehouse listing to published status",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The warehouse ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/PublishWarehouseInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully published warehouse",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error or missing required fields",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Warehouse not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    },
    "/v1/warehouses/{id}": {
    "get": {
    "summary": "Get warehouse by ID",
    "description": "Retrieve a specific warehouse listing by its ID",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The warehouse ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully retrieved warehouse",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    },
    "example": {
    "success": true,
    "data": {
    "id": "3ad3088c-54ac-4fd9-8e3d-7de1c86fb536",
    "buildingSize": 1056,
    "lotSize": null,
    "floorArea": null,
    "ceilingHeight": null,
    "loadingDocks": null,
    "yearBuilt": null,
    "numberOfParkingSpaces": null,
    "nearbyLocations": [],
    "securityFeatures": [],
    "hasLoadingBay": null,
    "hasFireSprinklers": null,
    "hasSecuritySystem": null,
    "propertyId": "ba170b8e-2282-47cc-9b8a-12b6e31931f0",
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "property": {
    "id": "ba170b8e-2282-47cc-9b8a-12b6e31931f0",
    "userId": "user-123",
    "propertyTypeId": "prop-type-456",
    "listingTypeId": "list-type-789",
    "listingTitle": "Spacious 1056 SQM Warehouse for LEASE in Meycauayan | Perfect for Storage!!",
    "listingDescription": "Prime warehouse space available for lease",
    "listingDescriptionMarkdown": "### Prime Warehouse Facility\n\n**1056 SQM** of prime warehouse space available for lease in Meycauayan.\n\n*Features:*\n• Spacious layout\n• Strategic location\n• Easy access\n• Perfect for storage operations\n\nContact us today!",
    "listingPrice": 180000,
    "listingPriceFormatted": "₱180,000",
    "cityId": "city-123",
    "barangayId": "brgy-456",
    "streetAddress": null,
    "address": "Camalig, Meycauayan",
    "region": "Central Luzon",
    "longitude": 120.9919328,
    "latitude": 14.7691031,
    "isDraft": false,
    "isPublished": true,
    "scrapeId": null,
    "scrapeContactInfo": {
    "agentName": "Meliza Zapata",
    "agencyName": "PRIME Philippines",
    "extractedAt": "2025-06-01T09:31:19.555Z",
    "phoneNumber": "+639688805399"
    },
    "createdAt": "2024-12-01T10:00:00.000Z",
    "updatedAt": "2024-12-01T10:00:00.000Z",
    "images": [
    {
    "id": "img-001",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/a0138c/720x540c.jpg"
    },
    {
    "id": "img-002",
    "imageUrl": "https://pic1.ajkimg.com/display/anjuke/b2345d/720x540c.jpg"
    }
    ]
    },
    "isLiked": false
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Warehouse not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "put": {
    "summary": "Update a warehouse",
    "description": "Update an existing warehouse listing",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The warehouse ID"
    }
    ],
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/UpdateWarehouseInput"
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully updated warehouse",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "$ref": "#/components/schemas/WarehouseWithProperty"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Validation error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Warehouse not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    },
    "delete": {
    "summary": "Delete a warehouse",
    "description": "Delete a warehouse listing and its associated property",
    "tags": [
    "Warehouses"
    ],
    "security": [
    {
    "bearerAuth": []
    }
    ],
    "parameters": [
    {
    "name": "id",
    "in": "path",
    "required": true,
    "schema": {
    "type": "string",
    "format": "uuid"
    },
    "description": "The warehouse ID"
    }
    ],
    "responses": {
    "200": {
    "description": "Successfully deleted warehouse",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "success": {
    "type": "boolean",
    "example": true
    },
    "data": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "Warehouse listing deleted successfully"
    }
    }
    }
    }
    }
    }
    }
    },
    "401": {
    "description": "Unauthorized",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "404": {
    "description": "Warehouse not found",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    },
    "500": {
    "description": "Internal server error",
    "content": {
    "application/json": {
    "schema": {
    "$ref": "#/components/schemas/ErrorResponse"
    }
    }
    }
    }
    }
    }
    }
    },
    "tags": [
    {
    "name": "API Keys",
    "description": "API key management operations"
    },
    {
    "name": "AWS S3",
    "description": "File upload operations to AWS S3/DigitalOcean Spaces"
    },
    {
    "name": "Address & Building Search",
    "description": "Address and building search with auto-fill capabilities"
    },
    {
    "name": "BullMQ Jobs",
    "description": "Background job queue management for asynchronous processing. Recommended for property valuations."
    },
    {
    "name": "Condominiums",
    "description": "Condominium property listing operations"
    },
    {
    "name": "House and Lots",
    "description": "House and lot property listing operations"
    },
    {
    "name": "Job Schedulers",
    "description": "Manage scheduled background jobs and cron tasks"
    },
    {
    "name": "Amenities",
    "description": "Amenity management operations"
    },
    {
    "name": "Features",
    "description": "Feature management operations"
    },
    {
    "name": "Listing Types",
    "description": "Listing type management operations"
    },
    {
    "name": "PhilValuate AI",
    "description": "AI-powered property valuation service (Direct/synchronous - use BullMQ for production)"
    },
    {
    "name": "Property AI",
    "description": "AI-powered property listing features"
    },
    {
    "name": "Property Description AI",
    "description": "AI-powered property description generation"
    },
    {
    "name": "Property Likes",
    "description": "Property like management operations"
    },
    {
    "name": "Property Types",
    "description": "Property type management operations"
    },
    {
    "name": "Scrape",
    "description": "Web scraping operations and data management"
    },
    {
    "name": "Scrape URLs",
    "description": "URL management for scraping operations"
    },
    {
    "name": "Processing Summary",
    "description": "Batch processing summary operations"
    },
    {
    "name": "Vacant Lots",
    "description": "Vacant lot property listing operations"
    },
    {
    "name": "Warehouses",
    "description": "Warehouse property listing operations"
    }
    ]
    }